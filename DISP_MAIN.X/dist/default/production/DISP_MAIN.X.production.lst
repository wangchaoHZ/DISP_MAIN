

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Sat May 17 20:38:37 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=3
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=3
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=3
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=3
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=3
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=3
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    39   000000                     
    40                           ; Generated 17/10/2023 GMT
    41                           ; 
    42                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4520 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74   000FE0                     bsr             equ	4064
    75   000FE9                     fsr0            equ	4073
    76   000FEA                     fsr0h           equ	4074
    77   000FE9                     fsr0l           equ	4073
    78   000FE1                     fsr1            equ	4065
    79   000FE2                     fsr1h           equ	4066
    80   000FE1                     fsr1l           equ	4065
    81   000FD9                     fsr2            equ	4057
    82   000FDA                     fsr2h           equ	4058
    83   000FD9                     fsr2l           equ	4057
    84   000FEF                     indf0           equ	4079
    85   000FE7                     indf1           equ	4071
    86   000FDF                     indf2           equ	4063
    87   000FF2                     intcon          equ	4082
    88   000000                     nvmcon          equ	0
    89   000FF9                     pcl             equ	4089
    90   000FFA                     pclath          equ	4090
    91   000FFB                     pclatu          equ	4091
    92   000FEB                     plusw0          equ	4075
    93   000FE3                     plusw1          equ	4067
    94   000FDB                     plusw2          equ	4059
    95   000FED                     postdec0        equ	4077
    96   000FE5                     postdec1        equ	4069
    97   000FDD                     postdec2        equ	4061
    98   000FEE                     postinc0        equ	4078
    99   000FE6                     postinc1        equ	4070
   100   000FDE                     postinc2        equ	4062
   101   000FEC                     preinc0         equ	4076
   102   000FE4                     preinc1         equ	4068
   103   000FDC                     preinc2         equ	4060
   104   000FF3                     prod            equ	4083
   105   000FF4                     prodh           equ	4084
   106   000FF3                     prodl           equ	4083
   107   000FD8                     status          equ	4056
   108   000FF5                     tablat          equ	4085
   109   000FF6                     tblptr          equ	4086
   110   000FF7                     tblptrh         equ	4087
   111   000FF6                     tblptrl         equ	4086
   112   000FF8                     tblptru         equ	4088
   113   000FFD                     tosl            equ	4093
   114   000FE8                     wreg            equ	4072
   115   000F80                     PORTA           equ	3968	;# 
   116   000F81                     PORTB           equ	3969	;# 
   117   000F82                     PORTC           equ	3970	;# 
   118   000F83                     PORTD           equ	3971	;# 
   119   000F84                     PORTE           equ	3972	;# 
   120   000F89                     LATA            equ	3977	;# 
   121   000F8A                     LATB            equ	3978	;# 
   122   000F8B                     LATC            equ	3979	;# 
   123   000F8C                     LATD            equ	3980	;# 
   124   000F8D                     LATE            equ	3981	;# 
   125   000F92                     TRISA           equ	3986	;# 
   126   000F92                     DDRA            equ	3986	;# 
   127   000F93                     TRISB           equ	3987	;# 
   128   000F93                     DDRB            equ	3987	;# 
   129   000F94                     TRISC           equ	3988	;# 
   130   000F94                     DDRC            equ	3988	;# 
   131   000F95                     TRISD           equ	3989	;# 
   132   000F95                     DDRD            equ	3989	;# 
   133   000F96                     TRISE           equ	3990	;# 
   134   000F96                     DDRE            equ	3990	;# 
   135   000F9B                     OSCTUNE         equ	3995	;# 
   136   000F9D                     PIE1            equ	3997	;# 
   137   000F9E                     PIR1            equ	3998	;# 
   138   000F9F                     IPR1            equ	3999	;# 
   139   000FA0                     PIE2            equ	4000	;# 
   140   000FA1                     PIR2            equ	4001	;# 
   141   000FA2                     IPR2            equ	4002	;# 
   142   000FA6                     EECON1          equ	4006	;# 
   143   000FA7                     EECON2          equ	4007	;# 
   144   000FA8                     EEDATA          equ	4008	;# 
   145   000FA9                     EEADR           equ	4009	;# 
   146   000FAB                     RCSTA           equ	4011	;# 
   147   000FAB                     RCSTA1          equ	4011	;# 
   148   000FAC                     TXSTA           equ	4012	;# 
   149   000FAC                     TXSTA1          equ	4012	;# 
   150   000FAD                     TXREG           equ	4013	;# 
   151   000FAD                     TXREG1          equ	4013	;# 
   152   000FAE                     RCREG           equ	4014	;# 
   153   000FAE                     RCREG1          equ	4014	;# 
   154   000FAF                     SPBRG           equ	4015	;# 
   155   000FAF                     SPBRG1          equ	4015	;# 
   156   000FB0                     SPBRGH          equ	4016	;# 
   157   000FB1                     T3CON           equ	4017	;# 
   158   000FB2                     TMR3            equ	4018	;# 
   159   000FB2                     TMR3L           equ	4018	;# 
   160   000FB3                     TMR3H           equ	4019	;# 
   161   000FB4                     CMCON           equ	4020	;# 
   162   000FB5                     CVRCON          equ	4021	;# 
   163   000FB6                     ECCP1AS         equ	4022	;# 
   164   000FB6                     ECCPAS          equ	4022	;# 
   165   000FB7                     PWM1CON         equ	4023	;# 
   166   000FB7                     ECCP1DEL        equ	4023	;# 
   167   000FB8                     BAUDCON         equ	4024	;# 
   168   000FB8                     BAUDCTL         equ	4024	;# 
   169   000FBA                     CCP2CON         equ	4026	;# 
   170   000FBB                     CCPR2           equ	4027	;# 
   171   000FBB                     CCPR2L          equ	4027	;# 
   172   000FBC                     CCPR2H          equ	4028	;# 
   173   000FBD                     CCP1CON         equ	4029	;# 
   174   000FBE                     CCPR1           equ	4030	;# 
   175   000FBE                     CCPR1L          equ	4030	;# 
   176   000FBF                     CCPR1H          equ	4031	;# 
   177   000FC0                     ADCON2          equ	4032	;# 
   178   000FC1                     ADCON1          equ	4033	;# 
   179   000FC2                     ADCON0          equ	4034	;# 
   180   000FC3                     ADRES           equ	4035	;# 
   181   000FC3                     ADRESL          equ	4035	;# 
   182   000FC4                     ADRESH          equ	4036	;# 
   183   000FC5                     SSPCON2         equ	4037	;# 
   184   000FC6                     SSPCON1         equ	4038	;# 
   185   000FC7                     SSPSTAT         equ	4039	;# 
   186   000FC8                     SSPADD          equ	4040	;# 
   187   000FC9                     SSPBUF          equ	4041	;# 
   188   000FCA                     T2CON           equ	4042	;# 
   189   000FCB                     PR2             equ	4043	;# 
   190   000FCB                     MEMCON          equ	4043	;# 
   191   000FCC                     TMR2            equ	4044	;# 
   192   000FCD                     T1CON           equ	4045	;# 
   193   000FCE                     TMR1            equ	4046	;# 
   194   000FCE                     TMR1L           equ	4046	;# 
   195   000FCF                     TMR1H           equ	4047	;# 
   196   000FD0                     RCON            equ	4048	;# 
   197   000FD1                     WDTCON          equ	4049	;# 
   198   000FD2                     HLVDCON         equ	4050	;# 
   199   000FD2                     LVDCON          equ	4050	;# 
   200   000FD3                     OSCCON          equ	4051	;# 
   201   000FD5                     T0CON           equ	4053	;# 
   202   000FD6                     TMR0            equ	4054	;# 
   203   000FD6                     TMR0L           equ	4054	;# 
   204   000FD7                     TMR0H           equ	4055	;# 
   205   000FD8                     STATUS          equ	4056	;# 
   206   000FD9                     FSR2            equ	4057	;# 
   207   000FD9                     FSR2L           equ	4057	;# 
   208   000FDA                     FSR2H           equ	4058	;# 
   209   000FDB                     PLUSW2          equ	4059	;# 
   210   000FDC                     PREINC2         equ	4060	;# 
   211   000FDD                     POSTDEC2        equ	4061	;# 
   212   000FDE                     POSTINC2        equ	4062	;# 
   213   000FDF                     INDF2           equ	4063	;# 
   214   000FE0                     BSR             equ	4064	;# 
   215   000FE1                     FSR1            equ	4065	;# 
   216   000FE1                     FSR1L           equ	4065	;# 
   217   000FE2                     FSR1H           equ	4066	;# 
   218   000FE3                     PLUSW1          equ	4067	;# 
   219   000FE4                     PREINC1         equ	4068	;# 
   220   000FE5                     POSTDEC1        equ	4069	;# 
   221   000FE6                     POSTINC1        equ	4070	;# 
   222   000FE7                     INDF1           equ	4071	;# 
   223   000FE8                     WREG            equ	4072	;# 
   224   000FE9                     FSR0            equ	4073	;# 
   225   000FE9                     FSR0L           equ	4073	;# 
   226   000FEA                     FSR0H           equ	4074	;# 
   227   000FEB                     PLUSW0          equ	4075	;# 
   228   000FEC                     PREINC0         equ	4076	;# 
   229   000FED                     POSTDEC0        equ	4077	;# 
   230   000FEE                     POSTINC0        equ	4078	;# 
   231   000FEF                     INDF0           equ	4079	;# 
   232   000FF0                     INTCON3         equ	4080	;# 
   233   000FF1                     INTCON2         equ	4081	;# 
   234   000FF2                     INTCON          equ	4082	;# 
   235   000FF3                     PROD            equ	4083	;# 
   236   000FF3                     PRODL           equ	4083	;# 
   237   000FF4                     PRODH           equ	4084	;# 
   238   000FF5                     TABLAT          equ	4085	;# 
   239   000FF6                     TBLPTR          equ	4086	;# 
   240   000FF6                     TBLPTRL         equ	4086	;# 
   241   000FF7                     TBLPTRH         equ	4087	;# 
   242   000FF8                     TBLPTRU         equ	4088	;# 
   243   000FF9                     PCLAT           equ	4089	;# 
   244   000FF9                     PC              equ	4089	;# 
   245   000FF9                     PCL             equ	4089	;# 
   246   000FFA                     PCLATH          equ	4090	;# 
   247   000FFB                     PCLATU          equ	4091	;# 
   248   000FFC                     STKPTR          equ	4092	;# 
   249   000FFD                     TOS             equ	4093	;# 
   250   000FFD                     TOSL            equ	4093	;# 
   251   000FFE                     TOSH            equ	4094	;# 
   252   000FFF                     TOSU            equ	4095	;# 
   253   000F80                     PORTA           equ	3968	;# 
   254   000F81                     PORTB           equ	3969	;# 
   255   000F82                     PORTC           equ	3970	;# 
   256   000F83                     PORTD           equ	3971	;# 
   257   000F84                     PORTE           equ	3972	;# 
   258   000F89                     LATA            equ	3977	;# 
   259   000F8A                     LATB            equ	3978	;# 
   260   000F8B                     LATC            equ	3979	;# 
   261   000F8C                     LATD            equ	3980	;# 
   262   000F8D                     LATE            equ	3981	;# 
   263   000F92                     TRISA           equ	3986	;# 
   264   000F92                     DDRA            equ	3986	;# 
   265   000F93                     TRISB           equ	3987	;# 
   266   000F93                     DDRB            equ	3987	;# 
   267   000F94                     TRISC           equ	3988	;# 
   268   000F94                     DDRC            equ	3988	;# 
   269   000F95                     TRISD           equ	3989	;# 
   270   000F95                     DDRD            equ	3989	;# 
   271   000F96                     TRISE           equ	3990	;# 
   272   000F96                     DDRE            equ	3990	;# 
   273   000F9B                     OSCTUNE         equ	3995	;# 
   274   000F9D                     PIE1            equ	3997	;# 
   275   000F9E                     PIR1            equ	3998	;# 
   276   000F9F                     IPR1            equ	3999	;# 
   277   000FA0                     PIE2            equ	4000	;# 
   278   000FA1                     PIR2            equ	4001	;# 
   279   000FA2                     IPR2            equ	4002	;# 
   280   000FA6                     EECON1          equ	4006	;# 
   281   000FA7                     EECON2          equ	4007	;# 
   282   000FA8                     EEDATA          equ	4008	;# 
   283   000FA9                     EEADR           equ	4009	;# 
   284   000FAB                     RCSTA           equ	4011	;# 
   285   000FAB                     RCSTA1          equ	4011	;# 
   286   000FAC                     TXSTA           equ	4012	;# 
   287   000FAC                     TXSTA1          equ	4012	;# 
   288   000FAD                     TXREG           equ	4013	;# 
   289   000FAD                     TXREG1          equ	4013	;# 
   290   000FAE                     RCREG           equ	4014	;# 
   291   000FAE                     RCREG1          equ	4014	;# 
   292   000FAF                     SPBRG           equ	4015	;# 
   293   000FAF                     SPBRG1          equ	4015	;# 
   294   000FB0                     SPBRGH          equ	4016	;# 
   295   000FB1                     T3CON           equ	4017	;# 
   296   000FB2                     TMR3            equ	4018	;# 
   297   000FB2                     TMR3L           equ	4018	;# 
   298   000FB3                     TMR3H           equ	4019	;# 
   299   000FB4                     CMCON           equ	4020	;# 
   300   000FB5                     CVRCON          equ	4021	;# 
   301   000FB6                     ECCP1AS         equ	4022	;# 
   302   000FB6                     ECCPAS          equ	4022	;# 
   303   000FB7                     PWM1CON         equ	4023	;# 
   304   000FB7                     ECCP1DEL        equ	4023	;# 
   305   000FB8                     BAUDCON         equ	4024	;# 
   306   000FB8                     BAUDCTL         equ	4024	;# 
   307   000FBA                     CCP2CON         equ	4026	;# 
   308   000FBB                     CCPR2           equ	4027	;# 
   309   000FBB                     CCPR2L          equ	4027	;# 
   310   000FBC                     CCPR2H          equ	4028	;# 
   311   000FBD                     CCP1CON         equ	4029	;# 
   312   000FBE                     CCPR1           equ	4030	;# 
   313   000FBE                     CCPR1L          equ	4030	;# 
   314   000FBF                     CCPR1H          equ	4031	;# 
   315   000FC0                     ADCON2          equ	4032	;# 
   316   000FC1                     ADCON1          equ	4033	;# 
   317   000FC2                     ADCON0          equ	4034	;# 
   318   000FC3                     ADRES           equ	4035	;# 
   319   000FC3                     ADRESL          equ	4035	;# 
   320   000FC4                     ADRESH          equ	4036	;# 
   321   000FC5                     SSPCON2         equ	4037	;# 
   322   000FC6                     SSPCON1         equ	4038	;# 
   323   000FC7                     SSPSTAT         equ	4039	;# 
   324   000FC8                     SSPADD          equ	4040	;# 
   325   000FC9                     SSPBUF          equ	4041	;# 
   326   000FCA                     T2CON           equ	4042	;# 
   327   000FCB                     PR2             equ	4043	;# 
   328   000FCB                     MEMCON          equ	4043	;# 
   329   000FCC                     TMR2            equ	4044	;# 
   330   000FCD                     T1CON           equ	4045	;# 
   331   000FCE                     TMR1            equ	4046	;# 
   332   000FCE                     TMR1L           equ	4046	;# 
   333   000FCF                     TMR1H           equ	4047	;# 
   334   000FD0                     RCON            equ	4048	;# 
   335   000FD1                     WDTCON          equ	4049	;# 
   336   000FD2                     HLVDCON         equ	4050	;# 
   337   000FD2                     LVDCON          equ	4050	;# 
   338   000FD3                     OSCCON          equ	4051	;# 
   339   000FD5                     T0CON           equ	4053	;# 
   340   000FD6                     TMR0            equ	4054	;# 
   341   000FD6                     TMR0L           equ	4054	;# 
   342   000FD7                     TMR0H           equ	4055	;# 
   343   000FD8                     STATUS          equ	4056	;# 
   344   000FD9                     FSR2            equ	4057	;# 
   345   000FD9                     FSR2L           equ	4057	;# 
   346   000FDA                     FSR2H           equ	4058	;# 
   347   000FDB                     PLUSW2          equ	4059	;# 
   348   000FDC                     PREINC2         equ	4060	;# 
   349   000FDD                     POSTDEC2        equ	4061	;# 
   350   000FDE                     POSTINC2        equ	4062	;# 
   351   000FDF                     INDF2           equ	4063	;# 
   352   000FE0                     BSR             equ	4064	;# 
   353   000FE1                     FSR1            equ	4065	;# 
   354   000FE1                     FSR1L           equ	4065	;# 
   355   000FE2                     FSR1H           equ	4066	;# 
   356   000FE3                     PLUSW1          equ	4067	;# 
   357   000FE4                     PREINC1         equ	4068	;# 
   358   000FE5                     POSTDEC1        equ	4069	;# 
   359   000FE6                     POSTINC1        equ	4070	;# 
   360   000FE7                     INDF1           equ	4071	;# 
   361   000FE8                     WREG            equ	4072	;# 
   362   000FE9                     FSR0            equ	4073	;# 
   363   000FE9                     FSR0L           equ	4073	;# 
   364   000FEA                     FSR0H           equ	4074	;# 
   365   000FEB                     PLUSW0          equ	4075	;# 
   366   000FEC                     PREINC0         equ	4076	;# 
   367   000FED                     POSTDEC0        equ	4077	;# 
   368   000FEE                     POSTINC0        equ	4078	;# 
   369   000FEF                     INDF0           equ	4079	;# 
   370   000FF0                     INTCON3         equ	4080	;# 
   371   000FF1                     INTCON2         equ	4081	;# 
   372   000FF2                     INTCON          equ	4082	;# 
   373   000FF3                     PROD            equ	4083	;# 
   374   000FF3                     PRODL           equ	4083	;# 
   375   000FF4                     PRODH           equ	4084	;# 
   376   000FF5                     TABLAT          equ	4085	;# 
   377   000FF6                     TBLPTR          equ	4086	;# 
   378   000FF6                     TBLPTRL         equ	4086	;# 
   379   000FF7                     TBLPTRH         equ	4087	;# 
   380   000FF8                     TBLPTRU         equ	4088	;# 
   381   000FF9                     PCLAT           equ	4089	;# 
   382   000FF9                     PC              equ	4089	;# 
   383   000FF9                     PCL             equ	4089	;# 
   384   000FFA                     PCLATH          equ	4090	;# 
   385   000FFB                     PCLATU          equ	4091	;# 
   386   000FFC                     STKPTR          equ	4092	;# 
   387   000FFD                     TOS             equ	4093	;# 
   388   000FFD                     TOSL            equ	4093	;# 
   389   000FFE                     TOSH            equ	4094	;# 
   390   000FFF                     TOSU            equ	4095	;# 
   391   007CF4                     _TXIF           set	31988
   392   007F97                     _GIE            set	32663
   393   007F96                     _PEIE           set	32662
   394   007CED                     _RCIE           set	31981
   395   007CF5                     _RCIF           set	31989
   396   007D5C                     _CREN           set	32092
   397   007D65                     _TXEN           set	32101
   398   007D5F                     _SPEN           set	32095
   399   007D64                     _SYNC           set	32100
   400   007DC3                     _BRG16          set	32195
   401   007D62                     _BRGH           set	32098
   402   007CA7                     _TRISC7         set	31911
   403   007CA6                     _TRISC6         set	31910
   404   000FAE                     _RCREG          set	4014
   405   000FAD                     _TXREG          set	4013
   406   000FAF                     _SPBRG          set	4015
   407   000F8D                     _LATEbits       set	3981
   408   000F89                     _LATAbits       set	3977
   409   000F8B                     _LATCbits       set	3979
   410   000F96                     _TRISEbits      set	3990
   411   000F92                     _TRISAbits      set	3986
   412   000F93                     _TRISBbits      set	3987
   413   000F82                     _PORTCbits      set	3970
   414   000F94                     _TRISCbits      set	3988
   415   000F8A                     _LATBbits       set	3978
   416   000F8C                     _LATD           set	3980
   417                           
   418                           	psect	smallconst
   419   000600                     __psmallconst:
   420                           	callstack 0
   421   000600  00                 	db	0
   422   000601                     STR_25:
   423   000601  45                 	db	69	;'E'
   424   000602  52                 	db	82	;'R'
   425   000603  52                 	db	82	;'R'
   426   000604  4F                 	db	79	;'O'
   427   000605  52                 	db	82	;'R'
   428   000606  3A                 	db	58	;':'
   429   000607  55                 	db	85	;'U'
   430   000608  4E                 	db	78	;'N'
   431   000609  4B                 	db	75	;'K'
   432   00060A  4E                 	db	78	;'N'
   433   00060B  4F                 	db	79	;'O'
   434   00060C  57                 	db	87	;'W'
   435   00060D  4E                 	db	78	;'N'
   436   00060E  5F                 	db	95	;'_'
   437   00060F  43                 	db	67	;'C'
   438   000610  4D                 	db	77	;'M'
   439   000611  44                 	db	68	;'D'
   440   000612  3A                 	db	58	;':'
   441   000613  00                 	db	0
   442   000614                     STR_3:
   443   000614  43                 	db	67	;'C'
   444   000615  4F                 	db	79	;'O'
   445   000616  4E                 	db	78	;'N'
   446   000617  4E                 	db	78	;'N'
   447   000618  5F                 	db	95	;'_'
   448   000619  41                 	db	65	;'A'
   449   00061A  43                 	db	67	;'C'
   450   00061B  4B                 	db	75	;'K'
   451   00061C  0D                 	db	13
   452   00061D  0A                 	db	10
   453   00061E  00                 	db	0
   454   00061F                     STR_20:
   455   00061F  52                 	db	82	;'R'
   456   000620  43                 	db	67	;'C'
   457   000621  3A                 	db	58	;':'
   458   000622  25                 	db	37
   459   000623  30                 	db	48	;'0'
   460   000624  32                 	db	50	;'2'
   461   000625  58                 	db	88	;'X'
   462   000626  0D                 	db	13
   463   000627  0A                 	db	10
   464   000628  00                 	db	0
   465   000629                     STR_16:
   466   000629  53                 	db	83	;'S'
   467   00062A  48                 	db	72	;'H'
   468   00062B  4F                 	db	79	;'O'
   469   00062C  57                 	db	87	;'W'
   470   00062D  5F                 	db	95	;'_'
   471   00062E  30                 	db	48	;'0'
   472   00062F  30                 	db	48	;'0'
   473   000630  30                 	db	48	;'0'
   474   000631  00                 	db	0
   475   000632                     STR_4:
   476   000632  53                 	db	83	;'S'
   477   000633  48                 	db	72	;'H'
   478   000634  4F                 	db	79	;'O'
   479   000635  57                 	db	87	;'W'
   480   000636  5F                 	db	95	;'_'
   481   000637  30                 	db	48	;'0'
   482   000638  30                 	db	48	;'0'
   483   000639  31                 	db	49	;'1'
   484   00063A  00                 	db	0
   485   00063B                     STR_6:
   486   00063B  53                 	db	83	;'S'
   487   00063C  48                 	db	72	;'H'
   488   00063D  4F                 	db	79	;'O'
   489   00063E  57                 	db	87	;'W'
   490   00063F  5F                 	db	95	;'_'
   491   000640  30                 	db	48	;'0'
   492   000641  30                 	db	48	;'0'
   493   000642  32                 	db	50	;'2'
   494   000643  00                 	db	0
   495   000644                     STR_8:
   496   000644  53                 	db	83	;'S'
   497   000645  48                 	db	72	;'H'
   498   000646  4F                 	db	79	;'O'
   499   000647  57                 	db	87	;'W'
   500   000648  5F                 	db	95	;'_'
   501   000649  30                 	db	48	;'0'
   502   00064A  30                 	db	48	;'0'
   503   00064B  33                 	db	51	;'3'
   504   00064C  00                 	db	0
   505   00064D                     STR_10:
   506   00064D  53                 	db	83	;'S'
   507   00064E  48                 	db	72	;'H'
   508   00064F  4F                 	db	79	;'O'
   509   000650  57                 	db	87	;'W'
   510   000651  5F                 	db	95	;'_'
   511   000652  30                 	db	48	;'0'
   512   000653  30                 	db	48	;'0'
   513   000654  34                 	db	52	;'4'
   514   000655  00                 	db	0
   515   000656                     STR_12:
   516   000656  53                 	db	83	;'S'
   517   000657  48                 	db	72	;'H'
   518   000658  4F                 	db	79	;'O'
   519   000659  57                 	db	87	;'W'
   520   00065A  5F                 	db	95	;'_'
   521   00065B  30                 	db	48	;'0'
   522   00065C  30                 	db	48	;'0'
   523   00065D  35                 	db	53	;'5'
   524   00065E  00                 	db	0
   525   00065F                     STR_23:
   526   00065F  53                 	db	83	;'S'
   527   000660  45                 	db	69	;'E'
   528   000661  54                 	db	84	;'T'
   529   000662  30                 	db	48	;'0'
   530   000663  5F                 	db	95	;'_'
   531   000664  52                 	db	82	;'R'
   532   000665  43                 	db	67	;'C'
   533   000666  35                 	db	53	;'5'
   534   000667  00                 	db	0
   535   000668                     STR_21:
   536   000668  53                 	db	83	;'S'
   537   000669  45                 	db	69	;'E'
   538   00066A  54                 	db	84	;'T'
   539   00066B  31                 	db	49	;'1'
   540   00066C  5F                 	db	95	;'_'
   541   00066D  52                 	db	82	;'R'
   542   00066E  43                 	db	67	;'C'
   543   00066F  35                 	db	53	;'5'
   544   000670  00                 	db	0
   545   000671                     STR_14:
   546   000671  53                 	db	83	;'S'
   547   000672  48                 	db	72	;'H'
   548   000673  4F                 	db	79	;'O'
   549   000674  57                 	db	87	;'W'
   550   000675  5F                 	db	95	;'_'
   551   000676  30                 	db	48	;'0'
   552   000677  30                 	db	48	;'0'
   553   000678  36                 	db	54	;'6'
   554   000679  00                 	db	0
   555   00067A                     STR_18:
   556   00067A  52                 	db	82	;'R'
   557   00067B  45                 	db	69	;'E'
   558   00067C  41                 	db	65	;'A'
   559   00067D  44                 	db	68	;'D'
   560   00067E  5F                 	db	95	;'_'
   561   00067F  50                 	db	80	;'P'
   562   000680  49                 	db	73	;'I'
   563   000681  4E                 	db	78	;'N'
   564   000682  00                 	db	0
   565   000683                     STR_1:
   566   000683  43                 	db	67	;'C'
   567   000684  4F                 	db	79	;'O'
   568   000685  4E                 	db	78	;'N'
   569   000686  4E                 	db	78	;'N'
   570   000687  5F                 	db	95	;'_'
   571   000688  52                 	db	82	;'R'
   572   000689  45                 	db	69	;'E'
   573   00068A  51                 	db	81	;'Q'
   574   00068B  00                 	db	0
   575   000683                     STR_2           equ	STR_1
   576   00067A                     STR_19          equ	STR_18
   577   000671                     STR_15          equ	STR_14
   578   000668                     STR_22          equ	STR_21
   579   00065F                     STR_24          equ	STR_23
   580   000656                     STR_13          equ	STR_12
   581   00064D                     STR_11          equ	STR_10
   582   000644                     STR_9           equ	STR_8
   583   00063B                     STR_7           equ	STR_6
   584   000632                     STR_5           equ	STR_4
   585   000629                     STR_17          equ	STR_16
   586   00061C                     STR_26          equ	STR_3+8
   587   00068C  00                 	db	0	; dummy byte at the end
   588   000600                     __smallconst    set	__psmallconst
   589   000600                     __mediumconst   set	__psmallconst
   590   000002                     __activetblptr  equ	2
   591                           
   592                           ; #config settings
   593                           
   594                           	psect	cinit
   595   001142                     __pcinit:
   596                           	callstack 0
   597   001142                     start_initialization:
   598                           	callstack 0
   599   001142                     __initialization:
   600                           	callstack 0
   601                           
   602                           ; Clear objects allocated to BANK0 (32 bytes)
   603   001142  EE00  F080         	lfsr	0,__pbssBANK0
   604   001146  0E20               	movlw	32
   605   001148                     clear_0:
   606   001148  6AEE               	clrf	postinc0,c
   607   00114A  06E8               	decf	wreg,f,c
   608   00114C  E1FD               	bnz	clear_0
   609                           
   610                           ; Clear objects allocated to COMRAM (37 bytes)
   611   00114E  EE00  F043         	lfsr	0,__pbssCOMRAM
   612   001152  0E25               	movlw	37
   613   001154                     clear_1:
   614   001154  6AEE               	clrf	postinc0,c
   615   001156  06E8               	decf	wreg,f,c
   616   001158  E1FD               	bnz	clear_1
   617   00115A                     end_of_initialization:
   618                           	callstack 0
   619   00115A                     __end_of__initialization:
   620                           	callstack 0
   621   00115A  9068               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   622   00115C  9268               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   623   00115E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   624   001160  6EF8               	movwf	tblptru,c
   625   001162  0100               	movlb	0
   626   001164  EF47  F003         	goto	_main	;jump to C main() function
   627                           
   628                           	psect	bssCOMRAM
   629   000043                     __pbssCOMRAM:
   630                           	callstack 0
   631   000043                     _width:
   632                           	callstack 0
   633   000043                     	ds	2
   634   000045                     _prec:
   635                           	callstack 0
   636   000045                     	ds	2
   637   000047                     _flags:
   638                           	callstack 0
   639   000047                     	ds	1
   640   000048                     _uart_rx_index:
   641                           	callstack 0
   642   000048                     	ds	1
   643   000049                     _uart_frame_ready:
   644                           	callstack 0
   645   000049                     	ds	1
   646   00004A                     _buffer:
   647                           	callstack 0
   648   00004A                     	ds	20
   649   00005E                     _uart_rx_buffer:
   650                           	callstack 0
   651   00005E                     	ds	10
   652                           
   653                           	psect	bssBANK0
   654   000080                     __pbssBANK0:
   655                           	callstack 0
   656   000080                     _dbuf:
   657                           	callstack 0
   658   000080                     	ds	32
   659                           
   660                           	psect	cstackCOMRAM
   661   000001                     __pcstackCOMRAM:
   662                           	callstack 0
   663   000001                     ??_ISR:
   664                           
   665                           ; 1 bytes @ 0x0
   666   000001                     	ds	2
   667   000003                     ISR@received:
   668                           	callstack 0
   669                           
   670                           ; 1 bytes @ 0x2
   671   000003                     	ds	1
   672   000004                     ?_strchr:
   673                           	callstack 0
   674   000004                     ?_strlen:
   675                           	callstack 0
   676   000004                     ?_strncmp:
   677                           	callstack 0
   678   000004                     ?_read_prec_or_width:
   679                           	callstack 0
   680   000004                     latch_data@seg_data:
   681                           	callstack 0
   682   000004                     SelectIO@index:
   683                           	callstack 0
   684   000004                     UART_SendChar@ch:
   685                           	callstack 0
   686   000004                     read_prec_or_width@fmt:
   687                           	callstack 0
   688   000004                     strchr@s:
   689                           	callstack 0
   690   000004                     strlen@s:
   691                           	callstack 0
   692   000004                     strncmp@l:
   693                           	callstack 0
   694   000004                     delay_ms@ms:
   695                           	callstack 0
   696   000004                     fputc@c:
   697                           	callstack 0
   698   000004                     ??_read_RC_inputs:
   699   000004                     
   700                           ; 1 bytes @ 0x3
   701   000004                     	ds	1
   702   000005                     read_RC_inputs@result:
   703                           	callstack 0
   704   000005                     read_prec_or_width@ap:
   705                           	callstack 0
   706   000005                     strncmp@r:
   707                           	callstack 0
   708   000005                     UART_SendString@str:
   709                           	callstack 0
   710   000005                     strchr@c:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0x4
   714   000005                     	ds	1
   715   000006                     fputc@fp:
   716                           	callstack 0
   717   000006                     strlen@a:
   718                           	callstack 0
   719   000006                     strncmp@n:
   720                           	callstack 0
   721   000006                     ??_delay_ms:
   722   000006                     ??_read_prec_or_width:
   723                           
   724                           ; 1 bytes @ 0x5
   725   000006                     	ds	1
   726   000007                     ??_fputc:
   727   000007                     
   728                           ; 1 bytes @ 0x6
   729   000007                     	ds	1
   730   000008                     read_prec_or_width@c:
   731                           	callstack 0
   732   000008                     ??_strncmp:
   733                           
   734                           ; 1 bytes @ 0x7
   735   000008                     	ds	1
   736   000009                     ?_strstr:
   737                           	callstack 0
   738   000009                     strstr@h:
   739                           	callstack 0
   740   000009                     read_prec_or_width@n:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x8
   744   000009                     	ds	1
   745   00000A                     strstr@n:
   746                           	callstack 0
   747                           
   748                           ; 1 bytes @ 0x9
   749   00000A                     	ds	1
   750   00000B                     strstr@nl:
   751                           	callstack 0
   752   00000B                     
   753                           ; 1 bytes @ 0xA
   754   00000B                     	ds	1
   755   00000C                     fputs@s:
   756                           	callstack 0
   757                           
   758                           ; 1 bytes @ 0xB
   759   00000C                     	ds	1
   760   00000D                     fputs@fp:
   761                           	callstack 0
   762                           
   763                           ; 1 bytes @ 0xC
   764   00000D                     	ds	1
   765   00000E                     fputs@c:
   766                           	callstack 0
   767   00000E                     
   768                           ; 1 bytes @ 0xD
   769   00000E                     	ds	1
   770   00000F                     fputs@i:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0xE
   774   00000F                     	ds	2
   775   000011                     pad@fp:
   776                           	callstack 0
   777                           
   778                           ; 1 bytes @ 0x10
   779   000011                     	ds	1
   780   000012                     pad@buf:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x11
   784   000012                     	ds	1
   785   000013                     pad@p:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x12
   789   000013                     	ds	2
   790   000015                     ??_pad:
   791                           
   792                           ; 1 bytes @ 0x14
   793   000015                     	ds	1
   794   000016                     pad@i:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x15
   798   000016                     	ds	2
   799   000018                     xtoa@fp:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0x17
   803   000018                     	ds	1
   804   000019                     xtoa@d:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x18
   808   000019                     	ds	2
   809   00001B                     ??_xtoa:
   810                           
   811                           ; 1 bytes @ 0x1A
   812   00001B                     	ds	3
   813   00001E                     xtoa@p:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x1D
   817   00001E                     	ds	1
   818   00001F                     xtoa@w:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0x1E
   822   00001F                     	ds	2
   823   000021                     xtoa@c:
   824                           	callstack 0
   825                           
   826                           ; 1 bytes @ 0x20
   827   000021                     	ds	1
   828   000022                     xtoa@i:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x21
   832   000022                     	ds	2
   833   000024                     vfpfcnvrt@fp:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x23
   837   000024                     	ds	1
   838   000025                     vfpfcnvrt@fmt:
   839                           	callstack 0
   840                           
   841                           ; 1 bytes @ 0x24
   842   000025                     	ds	1
   843   000026                     vfpfcnvrt@ap:
   844                           	callstack 0
   845                           
   846                           ; 1 bytes @ 0x25
   847   000026                     	ds	1
   848   000027                     vfpfcnvrt@convarg:
   849                           	callstack 0
   850   000027                     
   851                           ; 1 bytes @ 0x26
   852   000027                     	ds	4
   853   00002B                     vfpfcnvrt@done:
   854                           	callstack 0
   855                           
   856                           ; 1 bytes @ 0x2A
   857   00002B                     	ds	1
   858   00002C                     vfpfcnvrt@cp:
   859                           	callstack 0
   860                           
   861                           ; 1 bytes @ 0x2B
   862   00002C                     	ds	1
   863   00002D                     ?_vfprintf:
   864                           	callstack 0
   865   00002D                     vfprintf@fp:
   866                           	callstack 0
   867                           
   868                           ; 1 bytes @ 0x2C
   869   00002D                     	ds	1
   870   00002E                     vfprintf@fmt:
   871                           	callstack 0
   872                           
   873                           ; 1 bytes @ 0x2D
   874   00002E                     	ds	1
   875   00002F                     vfprintf@ap:
   876                           	callstack 0
   877                           
   878                           ; 1 bytes @ 0x2E
   879   00002F                     	ds	1
   880   000030                     vfprintf@cfmt:
   881                           	callstack 0
   882   000030                     
   883                           ; 1 bytes @ 0x2F
   884   000030                     	ds	1
   885   000031                     ?_sprintf:
   886                           	callstack 0
   887   000031                     sprintf@s:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0x30
   891   000031                     	ds	1
   892   000032                     sprintf@fmt:
   893                           	callstack 0
   894                           
   895                           ; 1 bytes @ 0x31
   896   000032                     	ds	3
   897   000035                     sprintf@ap:
   898                           	callstack 0
   899   000035                     
   900                           ; 1 bytes @ 0x34
   901   000035                     	ds	1
   902   000036                     sprintf@f:
   903                           	callstack 0
   904                           
   905                           ; 11 bytes @ 0x35
   906   000036                     	ds	11
   907   000041                     main@rc_input:
   908                           	callstack 0
   909   000041                     
   910                           ; 1 bytes @ 0x40
   911   000041                     	ds	1
   912   000042                     main@i:
   913                           	callstack 0
   914                           
   915                           ; 1 bytes @ 0x41
   916   000042                     	ds	1
   917                           
   918 ;;
   919 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   920 ;;
   921 ;; *************** function _main *****************
   922 ;; Defined at:
   923 ;;		line 148 in file "main.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  i               1   65[COMRAM] unsigned char 
   928 ;;  rc_input        1   64[COMRAM] unsigned char 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   938 ;;      Params:         0       0       0       0       0       0       0
   939 ;;      Locals:         2       0       0       0       0       0       0
   940 ;;      Temps:          0       0       0       0       0       0       0
   941 ;;      Totals:         2       0       0       0       0       0       0
   942 ;;Total ram usage:        2 bytes
   943 ;; Hardware stack levels required when called: 9
   944 ;; This function calls:
   945 ;;		_SelectIO
   946 ;;		_UART_Init
   947 ;;		_UART_SendChar
   948 ;;		_UART_SendString
   949 ;;		_delay_ms
   950 ;;		_init_ports
   951 ;;		_latch_data
   952 ;;		_read_RC_inputs
   953 ;;		_sprintf
   954 ;;		_strstr
   955 ;; This function is called by:
   956 ;;		Startup code after reset
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           	psect	text0
   961   00068E                     __ptext0:
   962                           	callstack 0
   963   00068E                     _main:
   964                           	callstack 22
   965   00068E                     
   966                           ;main.c: 150: 
   967   00068E  0E01               	movlw	1
   968   000690  6E05               	movwf	(delay_ms@ms+1)^0,c
   969   000692  0EF4               	movlw	244
   970   000694  6E04               	movwf	delay_ms@ms^0,c
   971   000696  EC8A  F008         	call	_delay_ms	;wreg free
   972   00069A                     
   973                           ;main.c: 152:             }
   974   00069A  ECD2  F008         	call	_UART_Init	;wreg free
   975   00069E                     
   976                           ;main.c: 155: 
   977   00069E  ECC3  F008         	call	_init_ports	;wreg free
   978   0006A2                     
   979                           ;main.c: 157:             }
   980   0006A2  0E00               	movlw	0
   981   0006A4  EC68  F007         	call	_SelectIO
   982   0006A8                     
   983                           ;main.c: 158:             else if (strstr((char*)uart_rx_buffer, "SHOW_006"))
   984   0006A8  0EFF               	movlw	255
   985   0006AA  ECB4  F008         	call	_latch_data
   986   0006AE                     l1682:
   987                           
   988                           ;main.c: 161:                 SelectIO(6);;main.c: 162:             }
   989   0006AE  5049               	movf	_uart_frame_ready^0,w,c	;volatile
   990   0006B0  B4D8               	btfsc	status,2,c
   991   0006B2  EF5D  F003         	goto	u1071
   992   0006B6  EF5F  F003         	goto	u1070
   993   0006BA                     u1071:
   994   0006BA  EF57  F003         	goto	l1682
   995   0006BE                     u1070:
   996   0006BE                     
   997                           ;main.c: 163:             else if (strstr((char*)uart_rx_buffer, "SHOW_000"));main.c: 16
      +                          4:             {
   998   0006BE  6A49               	clrf	_uart_frame_ready^0,c	;volatile
   999   0006C0                     
  1000                           ;main.c: 166:                 SelectIO(0);
  1001   0006C0  0E5E               	movlw	low _uart_rx_buffer
  1002   0006C2  6E09               	movwf	strstr@h^0,c
  1003   0006C4  0E83               	movlw	low STR_1
  1004   0006C6  6E0A               	movwf	strstr@n^0,c
  1005   0006C8  EC92  F006         	call	_strstr	;wreg free
  1006   0006CC  0900               	iorlw	0
  1007   0006CE  B4D8               	btfsc	status,2,c
  1008   0006D0  EF6C  F003         	goto	u1081
  1009   0006D4  EF6E  F003         	goto	u1080
  1010   0006D8                     u1081:
  1011   0006D8  EF78  F003         	goto	l1690
  1012   0006DC                     u1080:
  1013   0006DC                     
  1014                           ;main.c: 167:             };main.c: 168:             else if (strstr((char*)uart_rx_buff
      +                          er, "READ_PIN"))
  1015   0006DC  0E14               	movlw	low STR_3
  1016   0006DE  6E05               	movwf	UART_SendString@str^0,c
  1017   0006E0  5005               	movf	UART_SendString@str^0,w,c
  1018   0006E2  A4D8               	btfss	status,2,c
  1019   0006E4  0E06               	movlw	high __smallconst
  1020   0006E6  6E06               	movwf	(UART_SendString@str+1)^0,c
  1021   0006E8  EC9F  F007         	call	_UART_SendString	;wreg free
  1022                           
  1023                           ;main.c: 169:             {
  1024   0006EC  EF61  F004         	goto	l1750
  1025   0006F0                     l1690:
  1026   0006F0  0E5E               	movlw	low _uart_rx_buffer
  1027   0006F2  6E09               	movwf	strstr@h^0,c
  1028   0006F4  0E32               	movlw	low STR_4
  1029   0006F6  6E0A               	movwf	strstr@n^0,c
  1030   0006F8  EC92  F006         	call	_strstr	;wreg free
  1031   0006FC  0900               	iorlw	0
  1032   0006FE  B4D8               	btfsc	status,2,c
  1033   000700  EF84  F003         	goto	u1091
  1034   000704  EF86  F003         	goto	u1090
  1035   000708                     u1091:
  1036   000708  EF8B  F003         	goto	l1694
  1037   00070C                     u1090:
  1038   00070C                     
  1039                           ;main.c: 171:                 sprintf(buffer, "RC:%02X\r\n", rc_input);;main.c: 173:    
      +                                   }
  1040   00070C  0E01               	movlw	1
  1041   00070E  EC68  F007         	call	_SelectIO
  1042                           
  1043                           ;main.c: 174:             else if (strstr((char*)uart_rx_buffer, "SET1_RC5"))
  1044   000712  EF61  F004         	goto	l1750
  1045   000716                     l1694:
  1046   000716  0E5E               	movlw	low _uart_rx_buffer
  1047   000718  6E09               	movwf	strstr@h^0,c
  1048   00071A  0E3B               	movlw	low STR_6
  1049   00071C  6E0A               	movwf	strstr@n^0,c
  1050   00071E  EC92  F006         	call	_strstr	;wreg free
  1051   000722  0900               	iorlw	0
  1052   000724  B4D8               	btfsc	status,2,c
  1053   000726  EF97  F003         	goto	u1101
  1054   00072A  EF99  F003         	goto	u1100
  1055   00072E                     u1101:
  1056   00072E  EF9E  F003         	goto	l1698
  1057   000732                     u1100:
  1058   000732                     
  1059                           ;main.c: 176: ;main.c: 178:             }
  1060   000732  0E02               	movlw	2
  1061   000734  EC68  F007         	call	_SelectIO
  1062                           
  1063                           ;main.c: 179:             else if (strstr((char*)uart_rx_buffer, "SET0_RC5"))
  1064   000738  EF61  F004         	goto	l1750
  1065   00073C                     l1698:
  1066   00073C  0E5E               	movlw	low _uart_rx_buffer
  1067   00073E  6E09               	movwf	strstr@h^0,c
  1068   000740  0E44               	movlw	low STR_8
  1069   000742  6E0A               	movwf	strstr@n^0,c
  1070   000744  EC92  F006         	call	_strstr	;wreg free
  1071   000748  0900               	iorlw	0
  1072   00074A  B4D8               	btfsc	status,2,c
  1073   00074C  EFAA  F003         	goto	u1111
  1074   000750  EFAC  F003         	goto	u1110
  1075   000754                     u1111:
  1076   000754  EFB1  F003         	goto	l1702
  1077   000758                     u1110:
  1078   000758                     
  1079                           ;main.c: 181: ;main.c: 183:             }
  1080   000758  0E03               	movlw	3
  1081   00075A  EC68  F007         	call	_SelectIO
  1082                           
  1083                           ;main.c: 184:             else
  1084   00075E  EF61  F004         	goto	l1750
  1085   000762                     l1702:
  1086   000762  0E5E               	movlw	low _uart_rx_buffer
  1087   000764  6E09               	movwf	strstr@h^0,c
  1088   000766  0E4D               	movlw	low STR_10
  1089   000768  6E0A               	movwf	strstr@n^0,c
  1090   00076A  EC92  F006         	call	_strstr	;wreg free
  1091   00076E  0900               	iorlw	0
  1092   000770  B4D8               	btfsc	status,2,c
  1093   000772  EFBD  F003         	goto	u1121
  1094   000776  EFBF  F003         	goto	u1120
  1095   00077A                     u1121:
  1096   00077A  EFC4  F003         	goto	l1706
  1097   00077E                     u1120:
  1098   00077E                     
  1099                           ;main.c: 186:                 UART_SendString("ERROR:UNKNOWN_CMD:");;main.c: 188:       
      +                                    {
  1100   00077E  0E04               	movlw	4
  1101   000780  EC68  F007         	call	_SelectIO
  1102                           
  1103                           ;main.c: 189:                     UART_SendChar(uart_rx_buffer[i]);
  1104   000784  EF61  F004         	goto	l1750
  1105   000788                     l1706:
  1106   000788  0E5E               	movlw	low _uart_rx_buffer
  1107   00078A  6E09               	movwf	strstr@h^0,c
  1108   00078C  0E56               	movlw	low STR_12
  1109   00078E  6E0A               	movwf	strstr@n^0,c
  1110   000790  EC92  F006         	call	_strstr	;wreg free
  1111   000794  0900               	iorlw	0
  1112   000796  B4D8               	btfsc	status,2,c
  1113   000798  EFD0  F003         	goto	u1131
  1114   00079C  EFD2  F003         	goto	u1130
  1115   0007A0                     u1131:
  1116   0007A0  EFD7  F003         	goto	l1710
  1117   0007A4                     u1130:
  1118   0007A4                     
  1119                           ;main.c: 191:                 UART_SendString("\r\n");;main.c: 193: 
  1120   0007A4  0E05               	movlw	5
  1121   0007A6  EC68  F007         	call	_SelectIO
  1122                           
  1123                           ;main.c: 194:             uart_rx_index = 0;
  1124   0007AA  EF61  F004         	goto	l1750
  1125   0007AE                     l1710:
  1126   0007AE  0E5E               	movlw	low _uart_rx_buffer
  1127   0007B0  6E09               	movwf	strstr@h^0,c
  1128   0007B2  0E71               	movlw	low STR_14
  1129   0007B4  6E0A               	movwf	strstr@n^0,c
  1130   0007B6  EC92  F006         	call	_strstr	;wreg free
  1131   0007BA  0900               	iorlw	0
  1132   0007BC  B4D8               	btfsc	status,2,c
  1133   0007BE  EFE3  F003         	goto	u1141
  1134   0007C2  EFE5  F003         	goto	u1140
  1135   0007C6                     u1141:
  1136   0007C6  EFEA  F003         	goto	l1714
  1137   0007CA                     u1140:
  1138   0007CA                     
  1139                           ;main.c: 196:     }
  1140   0007CA  0E06               	movlw	6
  1141   0007CC  EC68  F007         	call	_SelectIO
  1142   0007D0  EF61  F004         	goto	l1750
  1143   0007D4                     l1714:
  1144   0007D4  0E5E               	movlw	low _uart_rx_buffer
  1145   0007D6  6E09               	movwf	strstr@h^0,c
  1146   0007D8  0E29               	movlw	low STR_16
  1147   0007DA  6E0A               	movwf	strstr@n^0,c
  1148   0007DC  EC92  F006         	call	_strstr	;wreg free
  1149   0007E0  0900               	iorlw	0
  1150   0007E2  B4D8               	btfsc	status,2,c
  1151   0007E4  EFF6  F003         	goto	u1151
  1152   0007E8  EFF8  F003         	goto	u1150
  1153   0007EC                     u1151:
  1154   0007EC  EFFD  F003         	goto	l1718
  1155   0007F0                     u1150:
  1156   0007F0  0E00               	movlw	0
  1157   0007F2  EC68  F007         	call	_SelectIO
  1158   0007F6  EF61  F004         	goto	l1750
  1159   0007FA                     l1718:
  1160   0007FA  0E5E               	movlw	low _uart_rx_buffer
  1161   0007FC  6E09               	movwf	strstr@h^0,c
  1162   0007FE  0E7A               	movlw	low STR_18
  1163   000800  6E0A               	movwf	strstr@n^0,c
  1164   000802  EC92  F006         	call	_strstr	;wreg free
  1165   000806  0900               	iorlw	0
  1166   000808  B4D8               	btfsc	status,2,c
  1167   00080A  EF09  F004         	goto	u1161
  1168   00080E  EF0B  F004         	goto	u1160
  1169   000812                     u1161:
  1170   000812  EF1E  F004         	goto	l1726
  1171   000816                     u1160:
  1172   000816  ECDC  F006         	call	_read_RC_inputs	;wreg free
  1173   00081A  6E41               	movwf	main@rc_input^0,c
  1174   00081C  0E4A               	movlw	low _buffer
  1175   00081E  6E31               	movwf	sprintf@s^0,c
  1176   000820  0E1F               	movlw	low STR_20
  1177   000822  6E32               	movwf	sprintf@fmt^0,c
  1178   000824  C041  F033         	movff	main@rc_input,?_sprintf+2
  1179   000828  6A34               	clrf	(?_sprintf+3)^0,c
  1180   00082A  EC70  F008         	call	_sprintf	;wreg free
  1181   00082E  0E4A               	movlw	low _buffer
  1182   000830  6E05               	movwf	UART_SendString@str^0,c
  1183   000832  6A06               	clrf	(UART_SendString@str+1)^0,c
  1184   000834  EC9F  F007         	call	_UART_SendString	;wreg free
  1185   000838  EF61  F004         	goto	l1750
  1186   00083C                     l1726:
  1187   00083C  0E5E               	movlw	low _uart_rx_buffer
  1188   00083E  6E09               	movwf	strstr@h^0,c
  1189   000840  0E68               	movlw	low STR_21
  1190   000842  6E0A               	movwf	strstr@n^0,c
  1191   000844  EC92  F006         	call	_strstr	;wreg free
  1192   000848  0900               	iorlw	0
  1193   00084A  B4D8               	btfsc	status,2,c
  1194   00084C  EF2A  F004         	goto	u1171
  1195   000850  EF2C  F004         	goto	u1170
  1196   000854                     u1171:
  1197   000854  EF2F  F004         	goto	l1730
  1198   000858                     u1170:
  1199   000858  8A8B               	bsf	139,5,c	;volatile
  1200   00085A  EF61  F004         	goto	l1750
  1201   00085E                     l1730:
  1202   00085E  0E5E               	movlw	low _uart_rx_buffer
  1203   000860  6E09               	movwf	strstr@h^0,c
  1204   000862  0E5F               	movlw	low STR_23
  1205   000864  6E0A               	movwf	strstr@n^0,c
  1206   000866  EC92  F006         	call	_strstr	;wreg free
  1207   00086A  0900               	iorlw	0
  1208   00086C  B4D8               	btfsc	status,2,c
  1209   00086E  EF3B  F004         	goto	u1181
  1210   000872  EF3D  F004         	goto	u1180
  1211   000876                     u1181:
  1212   000876  EF40  F004         	goto	l1734
  1213   00087A                     u1180:
  1214   00087A  9A8B               	bcf	139,5,c	;volatile
  1215   00087C  EF61  F004         	goto	l1750
  1216   000880                     l1734:
  1217   000880  0E01               	movlw	low STR_25
  1218   000882  6E05               	movwf	UART_SendString@str^0,c
  1219   000884  5005               	movf	UART_SendString@str^0,w,c
  1220   000886  A4D8               	btfss	status,2,c
  1221   000888  0E06               	movlw	high __smallconst
  1222   00088A  6E06               	movwf	(UART_SendString@str+1)^0,c
  1223   00088C  EC9F  F007         	call	_UART_SendString	;wreg free
  1224   000890  6A42               	clrf	main@i^0,c
  1225   000892                     l1742:
  1226   000892  5042               	movf	main@i^0,w,c
  1227   000894  0F5E               	addlw	low _uart_rx_buffer
  1228   000896  6ED9               	movwf	fsr2l,c
  1229   000898  6ADA               	clrf	fsr2h,c
  1230   00089A  50DF               	movf	indf2,w,c
  1231   00089C  ECE1  F008         	call	_UART_SendChar
  1232   0008A0  2A42               	incf	main@i^0,f,c
  1233   0008A2  0E09               	movlw	9
  1234   0008A4  6442               	cpfsgt	main@i^0,c
  1235   0008A6  EF57  F004         	goto	u1191
  1236   0008AA  EF59  F004         	goto	u1190
  1237   0008AE                     u1191:
  1238   0008AE  EF49  F004         	goto	l1742
  1239   0008B2                     u1190:
  1240   0008B2  0E1C               	movlw	low (STR_3+8)
  1241   0008B4  6E05               	movwf	UART_SendString@str^0,c
  1242   0008B6  5005               	movf	UART_SendString@str^0,w,c
  1243   0008B8  A4D8               	btfss	status,2,c
  1244   0008BA  0E06               	movlw	high __smallconst
  1245   0008BC  6E06               	movwf	(UART_SendString@str+1)^0,c
  1246   0008BE  EC9F  F007         	call	_UART_SendString	;wreg free
  1247   0008C2                     l1750:
  1248   0008C2  6A48               	clrf	_uart_rx_index^0,c	;volatile
  1249   0008C4  EF57  F003         	goto	l1682
  1250   0008C8  EF07  F000         	goto	start
  1251   0008CC                     __end_of_main:
  1252                           	callstack 0
  1253                           
  1254 ;; *************** function _strstr *****************
  1255 ;; Defined at:
  1256 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\strstr.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;  h               1    8[COMRAM] PTR const unsigned char 
  1259 ;;		 -> NULL(0), uart_rx_buffer(10), 
  1260 ;;  n               1    9[COMRAM] PTR const unsigned char 
  1261 ;;		 -> STR_24(9), STR_22(9), STR_19(9), STR_17(9), 
  1262 ;;		 -> STR_15(9), STR_13(9), STR_11(9), STR_9(9), 
  1263 ;;		 -> STR_7(9), STR_5(9), STR_2(9), 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  nl              2   10[COMRAM] unsigned int 
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  1    8[COMRAM] PTR unsigned char 
  1268 ;; Registers used:
  1269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1275 ;;      Params:         2       0       0       0       0       0       0
  1276 ;;      Locals:         2       0       0       0       0       0       0
  1277 ;;      Temps:          0       0       0       0       0       0       0
  1278 ;;      Totals:         4       0       0       0       0       0       0
  1279 ;;Total ram usage:        4 bytes
  1280 ;; Hardware stack levels used: 1
  1281 ;; Hardware stack levels required when called: 2
  1282 ;; This function calls:
  1283 ;;		_strchr
  1284 ;;		_strlen
  1285 ;;		_strncmp
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text1
  1292   000D24                     __ptext1:
  1293                           	callstack 0
  1294   000D24                     _strstr:
  1295                           	callstack 28
  1296   000D24  500A               	movf	strstr@n^0,w,c
  1297   000D26  B4D8               	btfsc	status,2,c
  1298   000D28  EF98  F006         	goto	u1001
  1299   000D2C  EF9A  F006         	goto	u1000
  1300   000D30                     u1001:
  1301   000D30  EFDA  F006         	goto	l1648
  1302   000D34                     u1000:
  1303   000D34  C00A  F004         	movff	strstr@n,strlen@s
  1304   000D38  EC56  F008         	call	_strlen	;wreg free
  1305   000D3C  C004  F00B         	movff	?_strlen,strstr@nl
  1306   000D40  C005  F00C         	movff	?_strlen+1,strstr@nl+1
  1307   000D44  EFC7  F006         	goto	l1644
  1308   000D48                     l1636:
  1309   000D48  C009  F004         	movff	strstr@h,strncmp@l
  1310   000D4C  C00A  F005         	movff	strstr@n,strncmp@r
  1311   000D50  C00B  F006         	movff	strstr@nl,strncmp@n
  1312   000D54  C00C  F007         	movff	strstr@nl+1,strncmp@n+1
  1313   000D58  EC8D  F005         	call	_strncmp	;wreg free
  1314   000D5C  5004               	movf	?_strncmp^0,w,c
  1315   000D5E  1005               	iorwf	(?_strncmp+1)^0,w,c
  1316   000D60  A4D8               	btfss	status,2,c
  1317   000D62  EFB5  F006         	goto	u1011
  1318   000D66  EFB7  F006         	goto	u1010
  1319   000D6A                     u1011:
  1320   000D6A  EFBA  F006         	goto	l1642
  1321   000D6E                     u1010:
  1322   000D6E  5009               	movf	strstr@h^0,w,c
  1323   000D70  EFDB  F006         	goto	l948
  1324   000D74                     l1642:
  1325   000D74  2809               	incf	strstr@h^0,w,c
  1326   000D76  6E04               	movwf	strchr@s^0,c
  1327   000D78  C00A  FFF6         	movff	strstr@n,tblptrl
  1328   000D7C                     	if	1	;There is more than 1 active tblptr byte
  1329   000D7C  0E06               	movlw	high __smallconst
  1330   000D7E  6EF7               	movwf	tblptrh,c
  1331   000D80                     	endif
  1332   000D80                     	if	0	;tblptru may be non-zero
  1333   000D80                     	endif
  1334   000D80                     	if	0	;tblptru may be non-zero
  1335   000D80                     	endif
  1336   000D80  0008               	tblrd		*
  1337   000D82  50F5               	movf	tablat,w,c
  1338   000D84  6E05               	movwf	strchr@c^0,c
  1339   000D86  6A06               	clrf	(strchr@c+1)^0,c
  1340   000D88  EC39  F008         	call	_strchr	;wreg free
  1341   000D8C  6E09               	movwf	strstr@h^0,c
  1342   000D8E                     l1644:
  1343   000D8E  5009               	movf	strstr@h^0,w,c
  1344   000D90  B4D8               	btfsc	status,2,c
  1345   000D92  EFCD  F006         	goto	u1021
  1346   000D96  EFCF  F006         	goto	u1020
  1347   000D9A                     u1021:
  1348   000D9A  EFDA  F006         	goto	l1648
  1349   000D9E                     u1020:
  1350   000D9E  5009               	movf	strstr@h^0,w,c
  1351   000DA0  6ED9               	movwf	fsr2l,c
  1352   000DA2  6ADA               	clrf	fsr2h,c
  1353   000DA4  50DF               	movf	indf2,w,c
  1354   000DA6  A4D8               	btfss	status,2,c
  1355   000DA8  EFD8  F006         	goto	u1031
  1356   000DAC  EFDA  F006         	goto	u1030
  1357   000DB0                     u1031:
  1358   000DB0  EFA4  F006         	goto	l1636
  1359   000DB4                     u1030:
  1360   000DB4                     l1648:
  1361   000DB4  0E00               	movlw	0
  1362   000DB6                     l948:
  1363   000DB6  0012               	return		;funcret
  1364   000DB8                     __end_of_strstr:
  1365                           	callstack 0
  1366                           
  1367 ;; *************** function _strncmp *****************
  1368 ;; Defined at:
  1369 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\strncmp.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  l               1    3[COMRAM] PTR const unsigned char 
  1372 ;;		 -> NULL(0), uart_rx_buffer(10), 
  1373 ;;  r               1    4[COMRAM] PTR const unsigned char 
  1374 ;;		 -> STR_24(9), STR_22(9), STR_19(9), STR_17(9), 
  1375 ;;		 -> STR_15(9), STR_13(9), STR_11(9), STR_9(9), 
  1376 ;;		 -> STR_7(9), STR_5(9), STR_2(9), 
  1377 ;;  n               2    5[COMRAM] unsigned int 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  2    3[COMRAM] int 
  1382 ;; Registers used:
  1383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1389 ;;      Params:         4       0       0       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0       0       0
  1391 ;;      Temps:          1       0       0       0       0       0       0
  1392 ;;      Totals:         5       0       0       0       0       0       0
  1393 ;;Total ram usage:        5 bytes
  1394 ;; Hardware stack levels used: 1
  1395 ;; Hardware stack levels required when called: 1
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_strstr
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text2
  1404   000B1A                     __ptext2:
  1405                           	callstack 0
  1406   000B1A                     _strncmp:
  1407                           	callstack 28
  1408   000B1A  0606               	decf	strncmp@n^0,f,c
  1409   000B1C  A0D8               	btfss	status,0,c
  1410   000B1E  0607               	decf	(strncmp@n+1)^0,f,c
  1411   000B20  2806               	incf	strncmp@n^0,w,c
  1412   000B22  E106               	bnz	u871
  1413   000B24  2807               	incf	(strncmp@n+1)^0,w,c
  1414   000B26  A4D8               	btfss	status,2,c
  1415   000B28  EF98  F005         	goto	u871
  1416   000B2C  EF9A  F005         	goto	u870
  1417   000B30                     u871:
  1418   000B30  EFA5  F005         	goto	l1548
  1419   000B34                     u870:
  1420   000B34  0E00               	movlw	0
  1421   000B36  6E05               	movwf	(?_strncmp+1)^0,c
  1422   000B38  0E00               	movlw	0
  1423   000B3A  6E04               	movwf	?_strncmp^0,c
  1424   000B3C  EFEA  F005         	goto	l967
  1425   000B40                     l1546:
  1426   000B40  2A04               	incf	strncmp@l^0,f,c
  1427   000B42  2A05               	incf	strncmp@r^0,f,c
  1428   000B44  0606               	decf	strncmp@n^0,f,c
  1429   000B46  A0D8               	btfss	status,0,c
  1430   000B48  0607               	decf	(strncmp@n+1)^0,f,c
  1431   000B4A                     l1548:
  1432   000B4A  5004               	movf	strncmp@l^0,w,c
  1433   000B4C  6ED9               	movwf	fsr2l,c
  1434   000B4E  6ADA               	clrf	fsr2h,c
  1435   000B50  50DF               	movf	indf2,w,c
  1436   000B52  B4D8               	btfsc	status,2,c
  1437   000B54  EFAE  F005         	goto	u881
  1438   000B58  EFB0  F005         	goto	u880
  1439   000B5C                     u881:
  1440   000B5C  EFDA  F005         	goto	l1556
  1441   000B60                     u880:
  1442   000B60  C005  FFF6         	movff	strncmp@r,tblptrl
  1443   000B64                     	if	1	;There is more than 1 active tblptr byte
  1444   000B64  0E06               	movlw	high __smallconst
  1445   000B66  6EF7               	movwf	tblptrh,c
  1446   000B68                     	endif
  1447   000B68                     	if	0	;tblptru may be non-zero
  1448   000B68                     	endif
  1449   000B68                     	if	0	;tblptru may be non-zero
  1450   000B68                     	endif
  1451   000B68  0008               	tblrd		*
  1452   000B6A  50F5               	movf	tablat,w,c
  1453   000B6C  0900               	iorlw	0
  1454   000B6E  B4D8               	btfsc	status,2,c
  1455   000B70  EFBC  F005         	goto	u891
  1456   000B74  EFBE  F005         	goto	u890
  1457   000B78                     u891:
  1458   000B78  EFDA  F005         	goto	l1556
  1459   000B7C                     u890:
  1460   000B7C  5006               	movf	strncmp@n^0,w,c
  1461   000B7E  1007               	iorwf	(strncmp@n+1)^0,w,c
  1462   000B80  B4D8               	btfsc	status,2,c
  1463   000B82  EFC5  F005         	goto	u901
  1464   000B86  EFC7  F005         	goto	u900
  1465   000B8A                     u901:
  1466   000B8A  EFDA  F005         	goto	l1556
  1467   000B8E                     u900:
  1468   000B8E  5004               	movf	strncmp@l^0,w,c
  1469   000B90  6ED9               	movwf	fsr2l,c
  1470   000B92  6ADA               	clrf	fsr2h,c
  1471   000B94  50DF               	movf	indf2,w,c
  1472   000B96  6E08               	movwf	??_strncmp^0,c
  1473   000B98  C005  FFF6         	movff	strncmp@r,tblptrl
  1474   000B9C                     	if	1	;There is more than 1 active tblptr byte
  1475   000B9C  0E06               	movlw	high __smallconst
  1476   000B9E  6EF7               	movwf	tblptrh,c
  1477   000BA0                     	endif
  1478   000BA0                     	if	0	;tblptru may be non-zero
  1479   000BA0                     	endif
  1480   000BA0                     	if	0	;tblptru may be non-zero
  1481   000BA0                     	endif
  1482   000BA0  0008               	tblrd		*
  1483   000BA2  50F5               	movf	tablat,w,c
  1484   000BA4  1808               	xorwf	??_strncmp^0,w,c
  1485   000BA6  B4D8               	btfsc	status,2,c
  1486   000BA8  EFD8  F005         	goto	u911
  1487   000BAC  EFDA  F005         	goto	u910
  1488   000BB0                     u911:
  1489   000BB0  EFA0  F005         	goto	l1546
  1490   000BB4                     u910:
  1491   000BB4                     l1556:
  1492   000BB4  5004               	movf	strncmp@l^0,w,c
  1493   000BB6  6ED9               	movwf	fsr2l,c
  1494   000BB8  6ADA               	clrf	fsr2h,c
  1495   000BBA  50DF               	movf	indf2,w,c
  1496   000BBC  6E08               	movwf	??_strncmp^0,c
  1497   000BBE  C005  FFF6         	movff	strncmp@r,tblptrl
  1498   000BC2                     	if	1	;There is more than 1 active tblptr byte
  1499   000BC2  0E06               	movlw	high __smallconst
  1500   000BC4  6EF7               	movwf	tblptrh,c
  1501   000BC6                     	endif
  1502   000BC6                     	if	0	;tblptru may be non-zero
  1503   000BC6                     	endif
  1504   000BC6                     	if	0	;tblptru may be non-zero
  1505   000BC6                     	endif
  1506   000BC6  0008               	tblrd		*
  1507   000BC8  50F5               	movf	tablat,w,c
  1508   000BCA  5C08               	subwf	??_strncmp^0,w,c
  1509   000BCC  6E04               	movwf	?_strncmp^0,c
  1510   000BCE  6A05               	clrf	(?_strncmp+1)^0,c
  1511   000BD0  A0D8               	btfss	status,0,c
  1512   000BD2  0605               	decf	(?_strncmp+1)^0,f,c
  1513   000BD4                     l967:
  1514   000BD4  0012               	return		;funcret
  1515   000BD6                     __end_of_strncmp:
  1516                           	callstack 0
  1517                           
  1518 ;; *************** function _strlen *****************
  1519 ;; Defined at:
  1520 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\strlen.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;  s               1    3[COMRAM] PTR const unsigned char 
  1523 ;;		 -> STR_24(9), STR_22(9), STR_19(9), STR_17(9), 
  1524 ;;		 -> STR_15(9), STR_13(9), STR_11(9), STR_9(9), 
  1525 ;;		 -> STR_7(9), STR_5(9), STR_2(9), 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  a               1    5[COMRAM] PTR const unsigned char 
  1528 ;;		 -> STR_24(9), STR_22(9), STR_19(9), STR_17(9), 
  1529 ;;		 -> STR_15(9), STR_13(9), STR_11(9), STR_9(9), 
  1530 ;;		 -> STR_7(9), STR_5(9), STR_2(9), 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  2    3[COMRAM] unsigned int 
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1540 ;;      Params:         2       0       0       0       0       0       0
  1541 ;;      Locals:         1       0       0       0       0       0       0
  1542 ;;      Temps:          0       0       0       0       0       0       0
  1543 ;;      Totals:         3       0       0       0       0       0       0
  1544 ;;Total ram usage:        3 bytes
  1545 ;; Hardware stack levels used: 1
  1546 ;; Hardware stack levels required when called: 1
  1547 ;; This function calls:
  1548 ;;		Nothing
  1549 ;; This function is called by:
  1550 ;;		_strstr
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           	psect	text3
  1555   0010AC                     __ptext3:
  1556                           	callstack 0
  1557   0010AC                     _strlen:
  1558                           	callstack 28
  1559   0010AC  C004  F006         	movff	strlen@s,strlen@a
  1560   0010B0  EF5B  F008         	goto	l1534
  1561   0010B4                     l1532:
  1562   0010B4  2A04               	incf	strlen@s^0,f,c
  1563   0010B6                     l1534:
  1564   0010B6  C004  FFF6         	movff	strlen@s,tblptrl
  1565   0010BA                     	if	1	;There is more than 1 active tblptr byte
  1566   0010BA  0E06               	movlw	high __smallconst
  1567   0010BC  6EF7               	movwf	tblptrh,c
  1568   0010BE                     	endif
  1569   0010BE                     	if	0	;tblptru may be non-zero
  1570   0010BE                     	endif
  1571   0010BE                     	if	0	;tblptru may be non-zero
  1572   0010BE                     	endif
  1573   0010BE  0008               	tblrd		*
  1574   0010C0  50F5               	movf	tablat,w,c
  1575   0010C2  0900               	iorlw	0
  1576   0010C4  A4D8               	btfss	status,2,c
  1577   0010C6  EF67  F008         	goto	u861
  1578   0010CA  EF69  F008         	goto	u860
  1579   0010CE                     u861:
  1580   0010CE  EF5A  F008         	goto	l1532
  1581   0010D2                     u860:
  1582   0010D2  5006               	movf	strlen@a^0,w,c
  1583   0010D4  5C04               	subwf	strlen@s^0,w,c
  1584   0010D6  6E04               	movwf	?_strlen^0,c
  1585   0010D8  6A05               	clrf	(?_strlen+1)^0,c
  1586   0010DA  BE04               	btfsc	?_strlen^0,7,c
  1587   0010DC  0605               	decf	(?_strlen+1)^0,f,c
  1588   0010DE  0012               	return		;funcret
  1589   0010E0                     __end_of_strlen:
  1590                           	callstack 0
  1591                           
  1592 ;; *************** function _strchr *****************
  1593 ;; Defined at:
  1594 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\strchr.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;  s               1    3[COMRAM] PTR const unsigned char 
  1597 ;;		 -> NULL(0), uart_rx_buffer(10), 
  1598 ;;  c               2    4[COMRAM] int 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    3[COMRAM] PTR unsigned char 
  1603 ;; Registers used:
  1604 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1610 ;;      Params:         3       0       0       0       0       0       0
  1611 ;;      Locals:         0       0       0       0       0       0       0
  1612 ;;      Temps:          1       0       0       0       0       0       0
  1613 ;;      Totals:         4       0       0       0       0       0       0
  1614 ;;Total ram usage:        4 bytes
  1615 ;; Hardware stack levels used: 1
  1616 ;; Hardware stack levels required when called: 1
  1617 ;; This function calls:
  1618 ;;		Nothing
  1619 ;; This function is called by:
  1620 ;;		_strstr
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text4
  1625   001072                     __ptext4:
  1626                           	callstack 0
  1627   001072                     _strchr:
  1628                           	callstack 28
  1629   001072                     l954:
  1630   001072  5004               	movf	strchr@s^0,w,c
  1631   001074  6ED9               	movwf	fsr2l,c
  1632   001076  6ADA               	clrf	fsr2h,c
  1633   001078  5005               	movf	strchr@c^0,w,c
  1634   00107A  18DE               	xorwf	postinc2,w,c
  1635   00107C  A4D8               	btfss	status,2,c
  1636   00107E  EF43  F008         	goto	u921
  1637   001082  EF45  F008         	goto	u920
  1638   001086                     u921:
  1639   001086  EF48  F008         	goto	l1566
  1640   00108A                     u920:
  1641   00108A  5004               	movf	strchr@s^0,w,c
  1642   00108C  EF55  F008         	goto	l956
  1643   001090                     l1566:
  1644   001090  2A04               	incf	strchr@s^0,f,c
  1645   001092  0404               	decf	strchr@s^0,w,c
  1646   001094  6ED9               	movwf	fsr2l,c
  1647   001096  6ADA               	clrf	fsr2h,c
  1648   001098  50DF               	movf	indf2,w,c
  1649   00109A  A4D8               	btfss	status,2,c
  1650   00109C  EF52  F008         	goto	u931
  1651   0010A0  EF54  F008         	goto	u930
  1652   0010A4                     u931:
  1653   0010A4  EF39  F008         	goto	l954
  1654   0010A8                     u930:
  1655   0010A8  0E00               	movlw	0
  1656   0010AA                     l956:
  1657   0010AA  0012               	return		;funcret
  1658   0010AC                     __end_of_strchr:
  1659                           	callstack 0
  1660                           
  1661 ;; *************** function _sprintf *****************
  1662 ;; Defined at:
  1663 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;  s               1   48[COMRAM] PTR unsigned char 
  1666 ;;		 -> buffer(20), 
  1667 ;;  fmt             1   49[COMRAM] PTR const unsigned char 
  1668 ;;		 -> STR_20(10), 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  f              11   53[COMRAM] struct _IO_FILE
  1671 ;;  ret             2    0        int 
  1672 ;;  ap              1   52[COMRAM] PTR void [1]
  1673 ;;		 -> ?_sprintf(2), 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  2   48[COMRAM] int 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1683 ;;      Params:         4       0       0       0       0       0       0
  1684 ;;      Locals:        12       0       0       0       0       0       0
  1685 ;;      Temps:          0       0       0       0       0       0       0
  1686 ;;      Totals:        16       0       0       0       0       0       0
  1687 ;;Total ram usage:       16 bytes
  1688 ;; Hardware stack levels used: 1
  1689 ;; Hardware stack levels required when called: 8
  1690 ;; This function calls:
  1691 ;;		_vfprintf
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text5
  1698   0010E0                     __ptext5:
  1699                           	callstack 0
  1700   0010E0                     _sprintf:
  1701                           	callstack 22
  1702   0010E0  0E33               	movlw	low (?_sprintf+2)
  1703   0010E2  6E35               	movwf	sprintf@ap^0,c
  1704   0010E4  C031  F036         	movff	sprintf@s,sprintf@f
  1705   0010E8  0E00               	movlw	0
  1706   0010EA  6E39               	movwf	(sprintf@f+3)^0,c
  1707   0010EC  0E00               	movlw	0
  1708   0010EE  6E38               	movwf	(sprintf@f+2)^0,c
  1709   0010F0  0E00               	movlw	0
  1710   0010F2  6E40               	movwf	(sprintf@f+10)^0,c
  1711   0010F4  0E00               	movlw	0
  1712   0010F6  6E3F               	movwf	(sprintf@f+9)^0,c
  1713   0010F8  0E36               	movlw	low sprintf@f
  1714   0010FA  6E2D               	movwf	vfprintf@fp^0,c
  1715   0010FC  C032  F02E         	movff	sprintf@fmt,vfprintf@fmt
  1716   001100  0E35               	movlw	low sprintf@ap
  1717   001102  6E2F               	movwf	vfprintf@ap^0,c
  1718   001104  ECFC  F007         	call	_vfprintf	;wreg free
  1719   001108  5031               	movf	sprintf@s^0,w,c
  1720   00110A  2438               	addwf	(sprintf@f+2)^0,w,c
  1721   00110C  6ED9               	movwf	fsr2l,c
  1722   00110E  6ADA               	clrf	fsr2h,c
  1723   001110  6ADF               	clrf	indf2,c
  1724   001112  0012               	return		;funcret
  1725   001114                     __end_of_sprintf:
  1726                           	callstack 0
  1727                           
  1728 ;; *************** function _vfprintf *****************
  1729 ;; Defined at:
  1730 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  fp              1   44[COMRAM] PTR struct _IO_FILE
  1733 ;;		 -> sprintf@f(11), 
  1734 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  1735 ;;		 -> STR_20(10), 
  1736 ;;  ap              1   46[COMRAM] PTR PTR void 
  1737 ;;		 -> sprintf@ap(1), 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  cfmt            1   47[COMRAM] PTR unsigned char 
  1740 ;;		 -> STR_20(10), 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  2   44[COMRAM] int 
  1743 ;; Registers used:
  1744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1750 ;;      Params:         3       0       0       0       0       0       0
  1751 ;;      Locals:         1       0       0       0       0       0       0
  1752 ;;      Temps:          0       0       0       0       0       0       0
  1753 ;;      Totals:         4       0       0       0       0       0       0
  1754 ;;Total ram usage:        4 bytes
  1755 ;; Hardware stack levels used: 1
  1756 ;; Hardware stack levels required when called: 7
  1757 ;; This function calls:
  1758 ;;		_vfpfcnvrt
  1759 ;; This function is called by:
  1760 ;;		_sprintf
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text6
  1765   000FF8                     __ptext6:
  1766                           	callstack 0
  1767   000FF8                     _vfprintf:
  1768                           	callstack 22
  1769   000FF8                     
  1770                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1771   000FF8  C02E  F030         	movff	vfprintf@fmt,vfprintf@cfmt
  1772                           
  1773                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1774   000FFC  EF08  F008         	goto	l1524
  1775   001000                     l1522:
  1776                           
  1777                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1778   001000  C02D  F024         	movff	vfprintf@fp,vfpfcnvrt@fp
  1779   001004  0E30               	movlw	low vfprintf@cfmt
  1780   001006  6E25               	movwf	vfpfcnvrt@fmt^0,c
  1781   001008  C02F  F026         	movff	vfprintf@ap,vfpfcnvrt@ap
  1782   00100C  EC66  F004         	call	_vfpfcnvrt	;wreg free
  1783   001010                     l1524:
  1784                           
  1785                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1786   001010  C030  FFF6         	movff	vfprintf@cfmt,tblptrl
  1787   001014                     	if	1	;There is more than 1 active tblptr byte
  1788   001014  0E06               	movlw	high __smallconst
  1789   001016  6EF7               	movwf	tblptrh,c
  1790   001018                     	endif
  1791   001018                     	if	0	;tblptru may be non-zero
  1792   001018                     	endif
  1793   001018                     	if	0	;tblptru may be non-zero
  1794   001018                     	endif
  1795   001018  0008               	tblrd		*
  1796   00101A  50F5               	movf	tablat,w,c
  1797   00101C  0900               	iorlw	0
  1798   00101E  A4D8               	btfss	status,2,c
  1799   001020  EF14  F008         	goto	u851
  1800   001024  EF16  F008         	goto	u850
  1801   001028                     u851:
  1802   001028  EF00  F008         	goto	l1522
  1803   00102C                     u850:
  1804   00102C                     
  1805                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1806   00102C  0E00               	movlw	0
  1807   00102E  6E2E               	movwf	(?_vfprintf+1)^0,c
  1808   001030  0E00               	movlw	0
  1809   001032  6E2D               	movwf	?_vfprintf^0,c
  1810   001034  0012               	return		;funcret
  1811   001036                     __end_of_vfprintf:
  1812                           	callstack 0
  1813                           
  1814 ;; *************** function _vfpfcnvrt *****************
  1815 ;; Defined at:
  1816 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;  fp              1   35[COMRAM] PTR struct _IO_FILE
  1819 ;;		 -> sprintf@f(11), 
  1820 ;;  fmt             1   36[COMRAM] PTR PTR unsigned char 
  1821 ;;		 -> vfprintf@cfmt(1), 
  1822 ;;  ap              1   37[COMRAM] PTR PTR void 
  1823 ;;		 -> sprintf@ap(1), 
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;  convarg         4   38[COMRAM] struct .
  1826 ;;  cp              1   43[COMRAM] PTR unsigned char 
  1827 ;;		 -> STR_20(10), 
  1828 ;;  done            1   42[COMRAM] _Bool 
  1829 ;;  c               1    0        unsigned char 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  1    wreg      void 
  1832 ;; Registers used:
  1833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1839 ;;      Params:         3       0       0       0       0       0       0
  1840 ;;      Locals:         6       0       0       0       0       0       0
  1841 ;;      Temps:          0       0       0       0       0       0       0
  1842 ;;      Totals:         9       0       0       0       0       0       0
  1843 ;;Total ram usage:        9 bytes
  1844 ;; Hardware stack levels used: 1
  1845 ;; Hardware stack levels required when called: 6
  1846 ;; This function calls:
  1847 ;;		_fputc
  1848 ;;		_read_prec_or_width
  1849 ;;		_xtoa
  1850 ;; This function is called by:
  1851 ;;		_vfprintf
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text7
  1856   0008CC                     __ptext7:
  1857                           	callstack 0
  1858   0008CC                     _vfpfcnvrt:
  1859                           	callstack 22
  1860   0008CC                     
  1861                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1862   0008CC  5025               	movf	vfpfcnvrt@fmt^0,w,c
  1863   0008CE  6ED9               	movwf	fsr2l,c
  1864   0008D0  6ADA               	clrf	fsr2h,c
  1865   0008D2  CFDF FFF6          	movff	indf2,tblptrl
  1866   0008D6                     	if	1	;There is more than 1 active tblptr byte
  1867   0008D6  0E06               	movlw	high __smallconst
  1868   0008D8  6EF7               	movwf	tblptrh,c
  1869   0008DA                     	endif
  1870   0008DA                     	if	0	;tblptru may be non-zero
  1871   0008DA                     	endif
  1872   0008DA                     	if	0	;tblptru may be non-zero
  1873   0008DA                     	endif
  1874   0008DA  0008               	tblrd		*
  1875   0008DC  50F5               	movf	tablat,w,c
  1876   0008DE  0A25               	xorlw	37
  1877   0008E0  A4D8               	btfss	status,2,c
  1878   0008E2  EF75  F004         	goto	u801
  1879   0008E6  EF77  F004         	goto	u800
  1880   0008EA                     u801:
  1881   0008EA  EF00  F005         	goto	l1508
  1882   0008EE                     u800:
  1883   0008EE                     
  1884                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1885   0008EE  5025               	movf	vfpfcnvrt@fmt^0,w,c
  1886   0008F0  6ED9               	movwf	fsr2l,c
  1887   0008F2  6ADA               	clrf	fsr2h,c
  1888   0008F4  2ADF               	incf	indf2,f,c
  1889   0008F6                     
  1890                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1891   0008F6  0E00               	movlw	0
  1892   0008F8  6E44               	movwf	(_width+1)^0,c
  1893   0008FA  0E00               	movlw	0
  1894   0008FC  6E43               	movwf	_width^0,c
  1895   0008FE  C043  F047         	movff	_width,_flags
  1896   000902                     
  1897                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1898   000902  6845               	setf	_prec^0,c
  1899   000904  6846               	setf	(_prec+1)^0,c
  1900   000906                     
  1901                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1902   000906  6A2B               	clrf	vfpfcnvrt@done^0,c
  1903                           
  1904                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1905   000908  EFA0  F004         	goto	l1480
  1906   00090C                     l1470:
  1907                           
  1908                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1909   00090C  8247               	bsf	_flags^0,1,c
  1910   00090E                     
  1911                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1912   00090E  5025               	movf	vfpfcnvrt@fmt^0,w,c
  1913   000910  6ED9               	movwf	fsr2l,c
  1914   000912  6ADA               	clrf	fsr2h,c
  1915   000914  2ADF               	incf	indf2,f,c
  1916                           
  1917                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1918   000916  EFA0  F004         	goto	l1480
  1919   00091A                     l1474:
  1920                           
  1921                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1922   00091A  0E01               	movlw	1
  1923   00091C  6E2B               	movwf	vfpfcnvrt@done^0,c
  1924                           
  1925                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1926   00091E  EFA0  F004         	goto	l1480
  1927   000922                     l1478:
  1928   000922  5025               	movf	vfpfcnvrt@fmt^0,w,c
  1929   000924  6ED9               	movwf	fsr2l,c
  1930   000926  6ADA               	clrf	fsr2h,c
  1931   000928  CFDF FFF6          	movff	indf2,tblptrl
  1932   00092C                     	if	1	;There is more than 1 active tblptr byte
  1933   00092C  0E06               	movlw	high __smallconst
  1934   00092E  6EF7               	movwf	tblptrh,c
  1935   000930                     	endif
  1936   000930                     	if	0	;tblptru may be non-zero
  1937   000930                     	endif
  1938   000930                     	if	0	;tblptru may be non-zero
  1939   000930                     	endif
  1940   000930  0008               	tblrd		*
  1941   000932  50F5               	movf	tablat,w,c
  1942                           
  1943                           ; Switch size 1, requested type "simple"
  1944                           ; Number of cases is 1, Range of values is 48 to 48
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte            4     3 (average)
  1948                           ;	Chosen strategy is simple_byte
  1949   000934  0A30               	xorlw	48	; case 48
  1950   000936  B4D8               	btfsc	status,2,c
  1951   000938  EF86  F004         	goto	l1470
  1952   00093C  EF8D  F004         	goto	l1474
  1953   000940                     l1480:
  1954                           
  1955                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1956   000940  502B               	movf	vfpfcnvrt@done^0,w,c
  1957   000942  B4D8               	btfsc	status,2,c
  1958   000944  EFA6  F004         	goto	u811
  1959   000948  EFA8  F004         	goto	u810
  1960   00094C                     u811:
  1961   00094C  EF91  F004         	goto	l1478
  1962   000950                     u810:
  1963   000950                     
  1964                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1965   000950  C025  F004         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1966   000954  C026  F005         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1967   000958  EC40  F006         	call	_read_prec_or_width	;wreg free
  1968   00095C  C004  F043         	movff	?_read_prec_or_width,_width
  1969   000960  C005  F044         	movff	?_read_prec_or_width+1,_width+1
  1970   000964                     
  1971                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1972   000964  BE44               	btfsc	(_width+1)^0,7,c
  1973   000966  EFB9  F004         	goto	u820
  1974   00096A  EFB7  F004         	goto	u821
  1975   00096E                     u821:
  1976   00096E  EFBE  F004         	goto	l1488
  1977   000972                     u820:
  1978   000972                     
  1979                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1980   000972  8047               	bsf	_flags^0,0,c
  1981                           
  1982                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1983   000974  6C43               	negf	_width^0,c
  1984   000976  1E44               	comf	(_width+1)^0,f,c
  1985   000978  B0D8               	btfsc	status,0,c
  1986   00097A  2A44               	incf	(_width+1)^0,f,c
  1987   00097C                     l1488:
  1988                           
  1989                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  1990   00097C  5025               	movf	vfpfcnvrt@fmt^0,w,c
  1991   00097E  6ED9               	movwf	fsr2l,c
  1992   000980  6ADA               	clrf	fsr2h,c
  1993   000982  50DF               	movf	indf2,w,c
  1994   000984  6E2C               	movwf	vfpfcnvrt@cp^0,c
  1995   000986  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1996   00098A                     	if	1	;There is more than 1 active tblptr byte
  1997   00098A  0E06               	movlw	high __smallconst
  1998   00098C  6EF7               	movwf	tblptrh,c
  1999   00098E                     	endif
  2000   00098E                     	if	0	;tblptru may be non-zero
  2001   00098E                     	endif
  2002   00098E                     	if	0	;tblptru may be non-zero
  2003   00098E                     	endif
  2004   00098E  0008               	tblrd		*
  2005   000990  50F5               	movf	tablat,w,c
  2006   000992  0A58               	xorlw	88
  2007   000994  A4D8               	btfss	status,2,c
  2008   000996  EFCF  F004         	goto	u831
  2009   00099A  EFD1  F004         	goto	u830
  2010   00099E                     u831:
  2011   00099E  EFFA  F004         	goto	l1504
  2012   0009A2                     u830:
  2013   0009A2                     
  2014                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  2015   0009A2  5026               	movf	vfpfcnvrt@ap^0,w,c
  2016   0009A4  6ED9               	movwf	fsr2l,c
  2017   0009A6  6ADA               	clrf	fsr2h,c
  2018   0009A8  0E02               	movlw	2
  2019   0009AA  26DF               	addwf	indf2,f,c
  2020   0009AC  5CDF               	subwf	indf2,w,c
  2021   0009AE  6ED9               	movwf	fsr2l,c
  2022   0009B0  6ADA               	clrf	fsr2h,c
  2023   0009B2  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  2024   0009B6  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  2025   0009BA                     
  2026                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  2027   0009BA  5025               	movf	vfpfcnvrt@fmt^0,w,c
  2028   0009BC  6ED9               	movwf	fsr2l,c
  2029   0009BE  6ADA               	clrf	fsr2h,c
  2030   0009C0  282C               	incf	vfpfcnvrt@cp^0,w,c
  2031   0009C2  6EDF               	movwf	indf2,c
  2032                           
  2033                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  2034   0009C4  EFEE  F004         	goto	l1502
  2035   0009C8                     l1496:
  2036                           
  2037                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1586:      return
      +                           (void) xtoa(fp,convarg.uint);;	Return value of _vfpfcnvrt is never used
  2038   0009C8  C024  F018         	movff	vfpfcnvrt@fp,xtoa@fp
  2039   0009CC  C027  F019         	movff	vfpfcnvrt@convarg,xtoa@d
  2040   0009D0  C028  F01A         	movff	vfpfcnvrt@convarg+1,xtoa@d+1
  2041   0009D4  EC12  F005         	call	_xtoa	;wreg free
  2042   0009D8  EF11  F005         	goto	l905
  2043   0009DC                     l1502:
  2044   0009DC  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2045   0009E0                     	if	1	;There is more than 1 active tblptr byte
  2046   0009E0  0E06               	movlw	high __smallconst
  2047   0009E2  6EF7               	movwf	tblptrh,c
  2048   0009E4                     	endif
  2049   0009E4                     	if	0	;tblptru may be non-zero
  2050   0009E4                     	endif
  2051   0009E4                     	if	0	;tblptru may be non-zero
  2052   0009E4                     	endif
  2053   0009E4  0008               	tblrd		*
  2054   0009E6  50F5               	movf	tablat,w,c
  2055                           
  2056                           ; Switch size 1, requested type "simple"
  2057                           ; Number of cases is 1, Range of values is 88 to 88
  2058                           ; switch strategies available:
  2059                           ; Name         Instructions Cycles
  2060                           ; simple_byte            4     3 (average)
  2061                           ;	Chosen strategy is simple_byte
  2062   0009E8  0A58               	xorlw	88	; case 88
  2063   0009EA  B4D8               	btfsc	status,2,c
  2064   0009EC  EFE4  F004         	goto	l1496
  2065   0009F0  EFFA  F004         	goto	l1504
  2066   0009F4                     l1504:
  2067                           
  2068                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2069   0009F4  5025               	movf	vfpfcnvrt@fmt^0,w,c
  2070   0009F6  6ED9               	movwf	fsr2l,c
  2071   0009F8  6ADA               	clrf	fsr2h,c
  2072   0009FA  2ADF               	incf	indf2,f,c
  2073   0009FC  EF11  F005         	goto	l905
  2074   000A00                     l1508:
  2075                           
  2076                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2077   000A00  5025               	movf	vfpfcnvrt@fmt^0,w,c
  2078   000A02  6ED9               	movwf	fsr2l,c
  2079   000A04  6ADA               	clrf	fsr2h,c
  2080   000A06  CFDF FFF6          	movff	indf2,tblptrl
  2081   000A0A                     	if	1	;There is more than 1 active tblptr byte
  2082   000A0A  0E06               	movlw	high __smallconst
  2083   000A0C  6EF7               	movwf	tblptrh,c
  2084   000A0E                     	endif
  2085   000A0E                     	if	0	;tblptru may be non-zero
  2086   000A0E                     	endif
  2087   000A0E                     	if	0	;tblptru may be non-zero
  2088   000A0E                     	endif
  2089   000A0E  0008               	tblrd		*
  2090   000A10  50F5               	movf	tablat,w,c
  2091   000A12  6E04               	movwf	fputc@c^0,c
  2092   000A14  6A05               	clrf	(fputc@c+1)^0,c
  2093   000A16  C024  F006         	movff	vfpfcnvrt@fp,fputc@fp
  2094   000A1A  ECEB  F005         	call	_fputc	;wreg free
  2095   000A1E  EFFA  F004         	goto	l1504
  2096   000A22                     l905:
  2097   000A22  0012               	return		;funcret
  2098   000A24                     __end_of_vfpfcnvrt:
  2099                           	callstack 0
  2100                           
  2101 ;; *************** function _xtoa *****************
  2102 ;; Defined at:
  2103 ;;		line 1055 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
  2106 ;;		 -> sprintf@f(11), 
  2107 ;;  d               2   24[COMRAM] unsigned int 
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  i               2   33[COMRAM] int 
  2110 ;;  w               2   30[COMRAM] int 
  2111 ;;  c               1   32[COMRAM] unsigned char 
  2112 ;;  p               1   29[COMRAM] _Bool 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2122 ;;      Params:         3       0       0       0       0       0       0
  2123 ;;      Locals:         6       0       0       0       0       0       0
  2124 ;;      Temps:          3       0       0       0       0       0       0
  2125 ;;      Totals:        12       0       0       0       0       0       0
  2126 ;;Total ram usage:       12 bytes
  2127 ;; Hardware stack levels used: 1
  2128 ;; Hardware stack levels required when called: 5
  2129 ;; This function calls:
  2130 ;;		_pad
  2131 ;; This function is called by:
  2132 ;;		_vfpfcnvrt
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text8
  2137   000A24                     __ptext8:
  2138                           	callstack 0
  2139   000A24                     _xtoa:
  2140                           	callstack 22
  2141   000A24                     
  2142                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1055: static void
      +                           xtoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1058: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 1059:  char c;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 
      +                          1063:     int i, w;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c
      +                          : 1067:  _Bool p = 1;
  2143   000A24  0E01               	movlw	1
  2144   000A26  6E1E               	movwf	xtoa@p^0,c
  2145   000A28                     
  2146                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1082:     w = wid
      +                          th;
  2147   000A28  C043  F01F         	movff	_width,xtoa@w
  2148   000A2C  C044  F020         	movff	_width+1,xtoa@w+1
  2149                           
  2150                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1095:     i = siz
      +                          eof(dbuf) - 1;
  2151   000A30  0E00               	movlw	0
  2152   000A32  6E23               	movwf	(xtoa@i+1)^0,c
  2153   000A34  0E1F               	movlw	31
  2154   000A36  6E22               	movwf	xtoa@i^0,c
  2155   000A38                     
  2156                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1096:     dbuf[i]
      +                           = '\0';
  2157   000A38  0100               	movlb	0	; () banked
  2158   000A3A  6B9F               	clrf	(_dbuf+31)& (0+255),b
  2159                           
  2160                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  2161   000A3C  EF4E  F005         	goto	l1432
  2162   000A40                     l1414:
  2163                           
  2164                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1106:     )) {;C:
      +                          \Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1107:         --i;
  2165   000A40  0622               	decf	xtoa@i^0,f,c
  2166   000A42  A0D8               	btfss	status,0,c
  2167   000A44  0623               	decf	(xtoa@i+1)^0,f,c
  2168   000A46                     
  2169                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1108:         c =
      +                           d & 0x0f;
  2170   000A46  5019               	movf	xtoa@d^0,w,c
  2171   000A48  0B0F               	andlw	15
  2172   000A4A  6E21               	movwf	xtoa@c^0,c
  2173   000A4C                     
  2174                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1109:   if (c < 1
      +                          0) {
  2175   000A4C  0E0A               	movlw	10
  2176   000A4E  6021               	cpfslt	xtoa@c^0,c
  2177   000A50  EF2C  F005         	goto	u711
  2178   000A54  EF2E  F005         	goto	u710
  2179   000A58                     u711:
  2180   000A58  EF32  F005         	goto	l1422
  2181   000A5C                     u710:
  2182   000A5C                     
  2183                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1110:    c += '0'
      +                          ;
  2184   000A5C  0E30               	movlw	48
  2185   000A5E  2621               	addwf	xtoa@c^0,f,c
  2186                           
  2187                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1111:   }
  2188   000A60  EF34  F005         	goto	l1424
  2189   000A64                     l1422:
  2190                           
  2191                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1118:    c += 'A'
      +                           - 10;
  2192   000A64  0E37               	movlw	55
  2193   000A66  2621               	addwf	xtoa@c^0,f,c
  2194   000A68                     l1424:
  2195                           
  2196                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1121:   dbuf[i] =
      +                           c;
  2197   000A68  5022               	movf	xtoa@i^0,w,c
  2198   000A6A  0F80               	addlw	low _dbuf
  2199   000A6C  6ED9               	movwf	fsr2l,c
  2200   000A6E  6ADA               	clrf	fsr2h,c
  2201   000A70  C021  FFDF         	movff	xtoa@c,indf2
  2202   000A74                     
  2203                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1125:   p = 0;
  2204   000A74  6A1E               	clrf	xtoa@p^0,c
  2205   000A76                     
  2206                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1127:         --w
      +                          ;
  2207   000A76  061F               	decf	xtoa@w^0,f,c
  2208   000A78  A0D8               	btfss	status,0,c
  2209   000A7A  0620               	decf	(xtoa@w+1)^0,f,c
  2210   000A7C                     
  2211                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1128:         d =
      +                           d >> 4;
  2212   000A7C  C019  F01B         	movff	xtoa@d,??_xtoa
  2213   000A80  C01A  F01C         	movff	xtoa@d+1,??_xtoa+1
  2214   000A84  0E04               	movlw	4
  2215   000A86  6E1D               	movwf	(??_xtoa+2)^0,c
  2216   000A88                     u725:
  2217   000A88  90D8               	bcf	status,0,c
  2218   000A8A  321C               	rrcf	(??_xtoa+1)^0,f,c
  2219   000A8C  321B               	rrcf	??_xtoa^0,f,c
  2220   000A8E  2E1D               	decfsz	(??_xtoa+2)^0,f,c
  2221   000A90  EF44  F005         	goto	u725
  2222   000A94  C01B  F019         	movff	??_xtoa,xtoa@d
  2223   000A98  C01C  F01A         	movff	??_xtoa+1,xtoa@d+1
  2224   000A9C                     l1432:
  2225                           
  2226                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  2227   000A9C  BE23               	btfsc	(xtoa@i+1)^0,7,c
  2228   000A9E  EF5A  F005         	goto	u731
  2229   000AA2  5023               	movf	(xtoa@i+1)^0,w,c
  2230   000AA4  E109               	bnz	u730
  2231   000AA6  0E02               	movlw	2
  2232   000AA8  5C22               	subwf	xtoa@i^0,w,c
  2233   000AAA  A0D8               	btfss	status,0,c
  2234   000AAC  EF5A  F005         	goto	u731
  2235   000AB0  EF5C  F005         	goto	u730
  2236   000AB4                     u731:
  2237   000AB4  EF81  F005         	goto	l1442
  2238   000AB8                     u730:
  2239   000AB8  5019               	movf	xtoa@d^0,w,c
  2240   000ABA  101A               	iorwf	(xtoa@d+1)^0,w,c
  2241   000ABC  A4D8               	btfss	status,2,c
  2242   000ABE  EF63  F005         	goto	u741
  2243   000AC2  EF65  F005         	goto	u740
  2244   000AC6                     u741:
  2245   000AC6  EF20  F005         	goto	l1414
  2246   000ACA                     u740:
  2247   000ACA  501E               	movf	xtoa@p^0,w,c
  2248   000ACC  A4D8               	btfss	status,2,c
  2249   000ACE  EF6B  F005         	goto	u751
  2250   000AD2  EF6D  F005         	goto	u750
  2251   000AD6                     u751:
  2252   000AD6  EF20  F005         	goto	l1414
  2253   000ADA                     u750:
  2254   000ADA  BE20               	btfsc	(xtoa@w+1)^0,7,c
  2255   000ADC  EF78  F005         	goto	u761
  2256   000AE0  5020               	movf	(xtoa@w+1)^0,w,c
  2257   000AE2  E108               	bnz	u760
  2258   000AE4  041F               	decf	xtoa@w^0,w,c
  2259   000AE6  A0D8               	btfss	status,0,c
  2260   000AE8  EF78  F005         	goto	u761
  2261   000AEC  EF7A  F005         	goto	u760
  2262   000AF0                     u761:
  2263   000AF0  EF81  F005         	goto	l1442
  2264   000AF4                     u760:
  2265   000AF4  B247               	btfsc	_flags^0,1,c
  2266   000AF6  EF7F  F005         	goto	u771
  2267   000AFA  EF81  F005         	goto	u770
  2268   000AFE                     u771:
  2269   000AFE  EF20  F005         	goto	l1414
  2270   000B02                     u770:
  2271   000B02                     l1442:
  2272                           
  2273                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1152:     return 
      +                          (void) pad(fp, &dbuf[i], w);
  2274   000B02  C018  F011         	movff	xtoa@fp,pad@fp
  2275   000B06  5022               	movf	xtoa@i^0,w,c
  2276   000B08  0F80               	addlw	low _dbuf
  2277   000B0A  6E12               	movwf	pad@buf^0,c
  2278   000B0C  C01F  F013         	movff	xtoa@w,pad@p
  2279   000B10  C020  F014         	movff	xtoa@w+1,pad@p+1
  2280   000B14  EC23  F007         	call	_pad	;wreg free
  2281   000B18  0012               	return		;funcret
  2282   000B1A                     __end_of_xtoa:
  2283                           	callstack 0
  2284                           
  2285 ;; *************** function _pad *****************
  2286 ;; Defined at:
  2287 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  fp              1   16[COMRAM] PTR struct _IO_FILE
  2290 ;;		 -> sprintf@f(11), 
  2291 ;;  buf             1   17[COMRAM] PTR unsigned char 
  2292 ;;		 -> dbuf(32), 
  2293 ;;  p               2   18[COMRAM] int 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  i               2   21[COMRAM] int 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2305 ;;      Params:         4       0       0       0       0       0       0
  2306 ;;      Locals:         2       0       0       0       0       0       0
  2307 ;;      Temps:          1       0       0       0       0       0       0
  2308 ;;      Totals:         7       0       0       0       0       0       0
  2309 ;;Total ram usage:        7 bytes
  2310 ;; Hardware stack levels used: 1
  2311 ;; Hardware stack levels required when called: 4
  2312 ;; This function calls:
  2313 ;;		_fputc
  2314 ;;		_fputs
  2315 ;; This function is called by:
  2316 ;;		_xtoa
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text9
  2321   000E46                     __ptext9:
  2322                           	callstack 0
  2323   000E46                     _pad:
  2324                           	callstack 22
  2325   000E46                     
  2326                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2327   000E46  A047               	btfss	_flags^0,0,c
  2328   000E48  EF28  F007         	goto	u671
  2329   000E4C  EF2A  F007         	goto	u670
  2330   000E50                     u671:
  2331   000E50  EF30  F007         	goto	l1396
  2332   000E54                     u670:
  2333   000E54                     
  2334                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2335   000E54  C012  F00C         	movff	pad@buf,fputs@s
  2336   000E58  C011  F00D         	movff	pad@fp,fputs@fp
  2337   000E5C  EC1B  F008         	call	_fputs	;wreg free
  2338   000E60                     l1396:
  2339                           
  2340                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2341   000E60  BE14               	btfsc	(pad@p+1)^0,7,c
  2342   000E62  EF37  F007         	goto	u680
  2343   000E66  EF35  F007         	goto	u681
  2344   000E6A                     u681:
  2345   000E6A  EF3B  F007         	goto	l863
  2346   000E6E                     u680:
  2347   000E6E                     
  2348                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2349   000E6E  0E00               	movlw	0
  2350   000E70  6E14               	movwf	(pad@p+1)^0,c
  2351   000E72  0E00               	movlw	0
  2352   000E74  6E13               	movwf	pad@p^0,c
  2353   000E76                     l863:
  2354                           
  2355                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2356   000E76  0E00               	movlw	0
  2357   000E78  6E17               	movwf	(pad@i+1)^0,c
  2358   000E7A  0E00               	movlw	0
  2359   000E7C  6E16               	movwf	pad@i^0,c
  2360                           
  2361                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2362   000E7E  EF4B  F007         	goto	l1404
  2363   000E82                     l1400:
  2364                           
  2365                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2366   000E82  0E00               	movlw	0
  2367   000E84  6E05               	movwf	(fputc@c+1)^0,c
  2368   000E86  0E20               	movlw	32
  2369   000E88  6E04               	movwf	fputc@c^0,c
  2370   000E8A  C011  F006         	movff	pad@fp,fputc@fp
  2371   000E8E  ECEB  F005         	call	_fputc	;wreg free
  2372   000E92                     
  2373                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2374   000E92  4A16               	infsnz	pad@i^0,f,c
  2375   000E94  2A17               	incf	(pad@i+1)^0,f,c
  2376   000E96                     l1404:
  2377                           
  2378                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2379   000E96  5013               	movf	pad@p^0,w,c
  2380   000E98  5C16               	subwf	pad@i^0,w,c
  2381   000E9A  5017               	movf	(pad@i+1)^0,w,c
  2382   000E9C  0A80               	xorlw	128
  2383   000E9E  6E15               	movwf	??_pad^0,c
  2384   000EA0  5014               	movf	(pad@p+1)^0,w,c
  2385   000EA2  0A80               	xorlw	128
  2386   000EA4  5815               	subwfb	??_pad^0,w,c
  2387   000EA6  A0D8               	btfss	status,0,c
  2388   000EA8  EF58  F007         	goto	u691
  2389   000EAC  EF5A  F007         	goto	u690
  2390   000EB0                     u691:
  2391   000EB0  EF41  F007         	goto	l1400
  2392   000EB4                     u690:
  2393   000EB4                     
  2394                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2395   000EB4  B047               	btfsc	_flags^0,0,c
  2396   000EB6  EF5F  F007         	goto	u701
  2397   000EBA  EF61  F007         	goto	u700
  2398   000EBE                     u701:
  2399   000EBE  EF67  F007         	goto	l868
  2400   000EC2                     u700:
  2401   000EC2                     
  2402                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2403   000EC2  C012  F00C         	movff	pad@buf,fputs@s
  2404   000EC6  C011  F00D         	movff	pad@fp,fputs@fp
  2405   000ECA  EC1B  F008         	call	_fputs	;wreg free
  2406   000ECE                     l868:
  2407   000ECE  0012               	return		;funcret
  2408   000ED0                     __end_of_pad:
  2409                           	callstack 0
  2410                           
  2411 ;; *************** function _fputs *****************
  2412 ;; Defined at:
  2413 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  s               1   11[COMRAM] PTR const unsigned char 
  2416 ;;		 -> dbuf(32), 
  2417 ;;  fp              1   12[COMRAM] PTR struct _IO_FILE
  2418 ;;		 -> sprintf@f(11), 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  i               2   14[COMRAM] int 
  2421 ;;  c               1   13[COMRAM] unsigned char 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  2   11[COMRAM] int 
  2424 ;; Registers used:
  2425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2431 ;;      Params:         2       0       0       0       0       0       0
  2432 ;;      Locals:         3       0       0       0       0       0       0
  2433 ;;      Temps:          0       0       0       0       0       0       0
  2434 ;;      Totals:         5       0       0       0       0       0       0
  2435 ;;Total ram usage:        5 bytes
  2436 ;; Hardware stack levels used: 1
  2437 ;; Hardware stack levels required when called: 3
  2438 ;; This function calls:
  2439 ;;		_fputc
  2440 ;; This function is called by:
  2441 ;;		_pad
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           	psect	text10
  2446   001036                     __ptext10:
  2447                           	callstack 0
  2448   001036                     _fputs:
  2449                           	callstack 22
  2450   001036  0E00               	movlw	0
  2451   001038  6E10               	movwf	(fputs@i+1)^0,c
  2452   00103A  0E00               	movlw	0
  2453   00103C  6E0F               	movwf	fputs@i^0,c
  2454   00103E  EF2A  F008         	goto	l1390
  2455   001042                     l1386:
  2456   001042  C00E  F004         	movff	fputs@c,fputc@c
  2457   001046  6A05               	clrf	(fputc@c+1)^0,c
  2458   001048  C00D  F006         	movff	fputs@fp,fputc@fp
  2459   00104C  ECEB  F005         	call	_fputc	;wreg free
  2460   001050  4A0F               	infsnz	fputs@i^0,f,c
  2461   001052  2A10               	incf	(fputs@i+1)^0,f,c
  2462   001054                     l1390:
  2463   001054  500C               	movf	fputs@s^0,w,c
  2464   001056  240F               	addwf	fputs@i^0,w,c
  2465   001058  6ED9               	movwf	fsr2l,c
  2466   00105A  6ADA               	clrf	fsr2h,c
  2467   00105C  50DF               	movf	indf2,w,c
  2468   00105E  6E0E               	movwf	fputs@c^0,c
  2469   001060  500E               	movf	fputs@c^0,w,c
  2470   001062  A4D8               	btfss	status,2,c
  2471   001064  EF36  F008         	goto	u661
  2472   001068  EF38  F008         	goto	u660
  2473   00106C                     u661:
  2474   00106C  EF21  F008         	goto	l1386
  2475   001070                     u660:
  2476   001070  0012               	return		;funcret
  2477   001072                     __end_of_fputs:
  2478                           	callstack 0
  2479                           
  2480 ;; *************** function _fputc *****************
  2481 ;; Defined at:
  2482 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  c               2    3[COMRAM] int 
  2485 ;;  fp              1    5[COMRAM] PTR struct _IO_FILE
  2486 ;;		 -> sprintf@f(11), 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  2    3[COMRAM] int 
  2491 ;; Registers used:
  2492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2498 ;;      Params:         3       0       0       0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0       0       0
  2500 ;;      Temps:          5       0       0       0       0       0       0
  2501 ;;      Totals:         8       0       0       0       0       0       0
  2502 ;;Total ram usage:        8 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 2
  2505 ;; This function calls:
  2506 ;;		_putch
  2507 ;; This function is called by:
  2508 ;;		_pad
  2509 ;;		_vfpfcnvrt
  2510 ;;		_fputs
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text11
  2515   000BD6                     __ptext11:
  2516                           	callstack 0
  2517   000BD6                     _fputc:
  2518                           	callstack 22
  2519   000BD6  5006               	movf	fputc@fp^0,w,c
  2520   000BD8  B4D8               	btfsc	status,2,c
  2521   000BDA  EFF1  F005         	goto	u621
  2522   000BDE  EFF3  F005         	goto	u620
  2523   000BE2                     u621:
  2524   000BE2  EFFB  F005         	goto	l1374
  2525   000BE6                     u620:
  2526   000BE6  5006               	movf	fputc@fp^0,w,c
  2527   000BE8  A4D8               	btfss	status,2,c
  2528   000BEA  EFF9  F005         	goto	u631
  2529   000BEE  EFFB  F005         	goto	u630
  2530   000BF2                     u631:
  2531   000BF2  EF00  F006         	goto	l1376
  2532   000BF6                     u630:
  2533   000BF6                     l1374:
  2534   000BF6  5004               	movf	fputc@c^0,w,c
  2535   000BF8  ECF2  F008         	call	_putch
  2536   000BFC  EF3F  F006         	goto	l924
  2537   000C00                     l1376:
  2538   000C00  5006               	movf	fputc@fp^0,w,c
  2539   000C02  6ED9               	movwf	fsr2l,c
  2540   000C04  6ADA               	clrf	fsr2h,c
  2541   000C06  0E09               	movlw	9
  2542   000C08  26D9               	addwf	fsr2l,f,c
  2543   000C0A  50DE               	movf	postinc2,w,c
  2544   000C0C  10DE               	iorwf	postinc2,w,c
  2545   000C0E  B4D8               	btfsc	status,2,c
  2546   000C10  EF0C  F006         	goto	u641
  2547   000C14  EF0E  F006         	goto	u640
  2548   000C18                     u641:
  2549   000C18  EF27  F006         	goto	l1380
  2550   000C1C                     u640:
  2551   000C1C  5006               	movf	fputc@fp^0,w,c
  2552   000C1E  6ED9               	movwf	fsr2l,c
  2553   000C20  6ADA               	clrf	fsr2h,c
  2554   000C22  0E09               	movlw	9
  2555   000C24  26D9               	addwf	fsr2l,f,c
  2556   000C26  5006               	movf	fputc@fp^0,w,c
  2557   000C28  6EE1               	movwf	fsr1l,c
  2558   000C2A  6AE2               	clrf	fsr1h,c
  2559   000C2C  0E02               	movlw	2
  2560   000C2E  26E1               	addwf	fsr1l,f,c
  2561   000C30  50DE               	movf	postinc2,w,c
  2562   000C32  5CE6               	subwf	postinc1,w,c
  2563   000C34  50E6               	movf	postinc1,w,c
  2564   000C36  0A80               	xorlw	128
  2565   000C38  6E0B               	movwf	(??_fputc+4)^0,c
  2566   000C3A  50DE               	movf	postinc2,w,c
  2567   000C3C  0A80               	xorlw	128
  2568   000C3E  580B               	subwfb	(??_fputc+4)^0,w,c
  2569   000C40  B0D8               	btfsc	status,0,c
  2570   000C42  EF25  F006         	goto	u651
  2571   000C46  EF27  F006         	goto	u650
  2572   000C4A                     u651:
  2573   000C4A  EF3F  F006         	goto	l924
  2574   000C4E                     u650:
  2575   000C4E                     l1380:
  2576   000C4E  5006               	movf	fputc@fp^0,w,c
  2577   000C50  6ED9               	movwf	fsr2l,c
  2578   000C52  6ADA               	clrf	fsr2h,c
  2579   000C54  0E02               	movlw	2
  2580   000C56  26D9               	addwf	fsr2l,f,c
  2581   000C58  50DF               	movf	indf2,w,c
  2582   000C5A  6E07               	movwf	??_fputc^0,c
  2583   000C5C  5006               	movf	fputc@fp^0,w,c
  2584   000C5E  6ED9               	movwf	fsr2l,c
  2585   000C60  6ADA               	clrf	fsr2h,c
  2586   000C62  50DF               	movf	indf2,w,c
  2587   000C64  2407               	addwf	??_fputc^0,w,c
  2588   000C66  6ED9               	movwf	fsr2l,c
  2589   000C68  6ADA               	clrf	fsr2h,c
  2590   000C6A  C004  FFDF         	movff	fputc@c,indf2
  2591   000C6E  5006               	movf	fputc@fp^0,w,c
  2592   000C70  6ED9               	movwf	fsr2l,c
  2593   000C72  6ADA               	clrf	fsr2h,c
  2594   000C74  0E02               	movlw	2
  2595   000C76  26D9               	addwf	fsr2l,f,c
  2596   000C78  2ADE               	incf	postinc2,f,c
  2597   000C7A  0E00               	movlw	0
  2598   000C7C  22DD               	addwfc	postdec2,f,c
  2599   000C7E                     l924:
  2600   000C7E  0012               	return		;funcret
  2601   000C80                     __end_of_fputc:
  2602                           	callstack 0
  2603                           
  2604 ;; *************** function _putch *****************
  2605 ;; Defined at:
  2606 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  c               1    wreg     unsigned char 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  c               1    0[COMRAM] unsigned char 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2620 ;;      Params:         0       0       0       0       0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0
  2623 ;;      Totals:         0       0       0       0       0       0       0
  2624 ;;Total ram usage:        0 bytes
  2625 ;; Hardware stack levels used: 1
  2626 ;; Hardware stack levels required when called: 1
  2627 ;; This function calls:
  2628 ;;		Nothing
  2629 ;; This function is called by:
  2630 ;;		_fputc
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text12
  2635   0011E4                     __ptext12:
  2636                           	callstack 0
  2637   0011E4                     _putch:
  2638                           	callstack 22
  2639   0011E4  0012               	return		;funcret
  2640   0011E6                     __end_of_putch:
  2641                           	callstack 0
  2642                           
  2643 ;; *************** function _read_prec_or_width *****************
  2644 ;; Defined at:
  2645 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  fmt             1    3[COMRAM] PTR PTR const unsigned c
  2648 ;;		 -> vfprintf@cfmt(1), 
  2649 ;;  ap              1    4[COMRAM] PTR PTR void [1]
  2650 ;;		 -> sprintf@ap(1), 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  c               1    7[COMRAM] unsigned char 
  2653 ;;  n               2    8[COMRAM] int 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  2    3[COMRAM] int 
  2656 ;; Registers used:
  2657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2663 ;;      Params:         2       0       0       0       0       0       0
  2664 ;;      Locals:         3       0       0       0       0       0       0
  2665 ;;      Temps:          2       0       0       0       0       0       0
  2666 ;;      Totals:         7       0       0       0       0       0       0
  2667 ;;Total ram usage:        7 bytes
  2668 ;; Hardware stack levels used: 1
  2669 ;; Hardware stack levels required when called: 1
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_vfpfcnvrt
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text13
  2678   000C80                     __ptext13:
  2679                           	callstack 0
  2680   000C80                     _read_prec_or_width:
  2681                           	callstack 26
  2682   000C80                     
  2683                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2684   000C80  0E00               	movlw	0
  2685   000C82  6E0A               	movwf	(read_prec_or_width@n+1)^0,c
  2686   000C84  0E00               	movlw	0
  2687   000C86  6E09               	movwf	read_prec_or_width@n^0,c
  2688   000C88                     
  2689                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2690   000C88  5004               	movf	read_prec_or_width@fmt^0,w,c
  2691   000C8A  6ED9               	movwf	fsr2l,c
  2692   000C8C  6ADA               	clrf	fsr2h,c
  2693   000C8E  CFDF FFF6          	movff	indf2,tblptrl
  2694   000C92                     	if	1	;There is more than 1 active tblptr byte
  2695   000C92  0E06               	movlw	high __smallconst
  2696   000C94  6EF7               	movwf	tblptrh,c
  2697   000C96                     	endif
  2698   000C96                     	if	0	;tblptru may be non-zero
  2699   000C96                     	endif
  2700   000C96                     	if	0	;tblptru may be non-zero
  2701   000C96                     	endif
  2702   000C96  0008               	tblrd		*
  2703   000C98  50F5               	movf	tablat,w,c
  2704   000C9A  0A2A               	xorlw	42
  2705   000C9C  A4D8               	btfss	status,2,c
  2706   000C9E  EF53  F006         	goto	u781
  2707   000CA2  EF55  F006         	goto	u780
  2708   000CA6                     u781:
  2709   000CA6  EF7A  F006         	goto	l1458
  2710   000CAA                     u780:
  2711   000CAA                     
  2712                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2713   000CAA  5004               	movf	read_prec_or_width@fmt^0,w,c
  2714   000CAC  6ED9               	movwf	fsr2l,c
  2715   000CAE  6ADA               	clrf	fsr2h,c
  2716   000CB0  2ADF               	incf	indf2,f,c
  2717   000CB2                     
  2718                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2719   000CB2  5005               	movf	read_prec_or_width@ap^0,w,c
  2720   000CB4  6ED9               	movwf	fsr2l,c
  2721   000CB6  6ADA               	clrf	fsr2h,c
  2722   000CB8  0E02               	movlw	2
  2723   000CBA  26DF               	addwf	indf2,f,c
  2724   000CBC  5CDF               	subwf	indf2,w,c
  2725   000CBE  6ED9               	movwf	fsr2l,c
  2726   000CC0  6ADA               	clrf	fsr2h,c
  2727   000CC2  CFDE F009          	movff	postinc2,read_prec_or_width@n
  2728   000CC6  CFDE F00A          	movff	postinc2,read_prec_or_width@n+1
  2729                           
  2730                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2731   000CCA  EF8D  F006         	goto	l884
  2732   000CCE                     l1454:
  2733                           
  2734                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2735   000CCE  0E0A               	movlw	10
  2736   000CD0  0209               	mulwf	read_prec_or_width@n^0,c
  2737   000CD2  CFF3 F006          	movff	prodl,??_read_prec_or_width
  2738   000CD6  CFF4 F007          	movff	prodh,??_read_prec_or_width+1
  2739   000CDA  020A               	mulwf	(read_prec_or_width@n+1)^0,c
  2740   000CDC  50F3               	movf	prodl,w,c
  2741   000CDE  2607               	addwf	(??_read_prec_or_width+1)^0,f,c
  2742   000CE0  5008               	movf	read_prec_or_width@c^0,w,c
  2743   000CE2  2406               	addwf	??_read_prec_or_width^0,w,c
  2744   000CE4  6E09               	movwf	read_prec_or_width@n^0,c
  2745   000CE6  0E00               	movlw	0
  2746   000CE8  2007               	addwfc	(??_read_prec_or_width+1)^0,w,c
  2747   000CEA  6E0A               	movwf	(read_prec_or_width@n+1)^0,c
  2748   000CEC                     
  2749                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2750   000CEC  5004               	movf	read_prec_or_width@fmt^0,w,c
  2751   000CEE  6ED9               	movwf	fsr2l,c
  2752   000CF0  6ADA               	clrf	fsr2h,c
  2753   000CF2  2ADF               	incf	indf2,f,c
  2754   000CF4                     l1458:
  2755                           
  2756                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2757   000CF4  5004               	movf	read_prec_or_width@fmt^0,w,c
  2758   000CF6  6ED9               	movwf	fsr2l,c
  2759   000CF8  6ADA               	clrf	fsr2h,c
  2760   000CFA  CFDF FFF6          	movff	indf2,tblptrl
  2761   000CFE                     	if	1	;There is more than 1 active tblptr byte
  2762   000CFE  0E06               	movlw	high __smallconst
  2763   000D00  6EF7               	movwf	tblptrh,c
  2764   000D02                     	endif
  2765   000D02                     	if	0	;tblptru may be non-zero
  2766   000D02                     	endif
  2767   000D02                     	if	0	;tblptru may be non-zero
  2768   000D02                     	endif
  2769   000D02  0008               	tblrd		*
  2770   000D04  50F5               	movf	tablat,w,c
  2771   000D06  0FD0               	addlw	208
  2772   000D08  6E08               	movwf	read_prec_or_width@c^0,c
  2773   000D0A  0E09               	movlw	9
  2774   000D0C  6408               	cpfsgt	read_prec_or_width@c^0,c
  2775   000D0E  EF8B  F006         	goto	u791
  2776   000D12  EF8D  F006         	goto	u790
  2777   000D16                     u791:
  2778   000D16  EF67  F006         	goto	l1454
  2779   000D1A                     u790:
  2780   000D1A                     l884:
  2781                           
  2782                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2783   000D1A  C009  F004         	movff	read_prec_or_width@n,?_read_prec_or_width
  2784   000D1E  C00A  F005         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2785   000D22  0012               	return		;funcret
  2786   000D24                     __end_of_read_prec_or_width:
  2787                           	callstack 0
  2788                           
  2789 ;; *************** function _read_RC_inputs *****************
  2790 ;; Defined at:
  2791 ;;		line 67 in file "main.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;		None
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  result          1    4[COMRAM] unsigned char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      unsigned char 
  2798 ;; Registers used:
  2799 ;;		wreg, status,2, status,0
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2805 ;;      Params:         0       0       0       0       0       0       0
  2806 ;;      Locals:         1       0       0       0       0       0       0
  2807 ;;      Temps:          1       0       0       0       0       0       0
  2808 ;;      Totals:         2       0       0       0       0       0       0
  2809 ;;Total ram usage:        2 bytes
  2810 ;; Hardware stack levels used: 1
  2811 ;; Hardware stack levels required when called: 1
  2812 ;; This function calls:
  2813 ;;		Nothing
  2814 ;; This function is called by:
  2815 ;;		_main
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text14
  2820   000DB8                     __ptext14:
  2821                           	callstack 0
  2822   000DB8                     _read_RC_inputs:
  2823                           	callstack 29
  2824   000DB8                     
  2825                           ;main.c: 69: 
  2826   000DB8  6A05               	clrf	read_RC_inputs@result^0,c
  2827   000DBA                     
  2828                           ;main.c: 71: void SelectIO(uint8_t index)
  2829   000DBA  B082               	btfsc	130,0,c	;volatile
  2830   000DBC  EFE2  F006         	goto	u951
  2831   000DC0  EFE5  F006         	goto	u950
  2832   000DC4                     u951:
  2833   000DC4  0E01               	movlw	1
  2834   000DC6  EFE6  F006         	goto	u956
  2835   000DCA                     u950:
  2836   000DCA  0E00               	movlw	0
  2837   000DCC                     u956:
  2838   000DCC  1205               	iorwf	read_RC_inputs@result^0,f,c
  2839                           
  2840                           ;main.c: 72: {
  2841   000DCE  B282               	btfsc	130,1,c	;volatile
  2842   000DD0  EFEC  F006         	goto	u961
  2843   000DD4  EFF0  F006         	goto	u960
  2844   000DD8                     u961:
  2845   000DD8  6A04               	clrf	??_read_RC_inputs^0,c
  2846   000DDA  2A04               	incf	??_read_RC_inputs^0,f,c
  2847   000DDC  EFF1  F006         	goto	u968
  2848   000DE0                     u960:
  2849   000DE0  6A04               	clrf	??_read_RC_inputs^0,c
  2850   000DE2                     u968:
  2851   000DE2  90D8               	bcf	status,0,c
  2852   000DE4  3404               	rlcf	??_read_RC_inputs^0,w,c
  2853   000DE6  1205               	iorwf	read_RC_inputs@result^0,f,c
  2854                           
  2855                           ;main.c: 73: 
  2856   000DE8  B482               	btfsc	130,2,c	;volatile
  2857   000DEA  EFF9  F006         	goto	u971
  2858   000DEE  EFFD  F006         	goto	u970
  2859   000DF2                     u971:
  2860   000DF2  6A04               	clrf	??_read_RC_inputs^0,c
  2861   000DF4  2A04               	incf	??_read_RC_inputs^0,f,c
  2862   000DF6  EFFE  F006         	goto	u978
  2863   000DFA                     u970:
  2864   000DFA  6A04               	clrf	??_read_RC_inputs^0,c
  2865   000DFC                     u978:
  2866   000DFC  90D8               	bcf	status,0,c
  2867   000DFE  3604               	rlcf	??_read_RC_inputs^0,f,c
  2868   000E00  90D8               	bcf	status,0,c
  2869   000E02  3404               	rlcf	??_read_RC_inputs^0,w,c
  2870   000E04  1205               	iorwf	read_RC_inputs@result^0,f,c
  2871                           
  2872                           ;main.c: 74:     LATAbits.LATA0 = 0;
  2873   000E06  B682               	btfsc	130,3,c	;volatile
  2874   000E08  EF08  F007         	goto	u981
  2875   000E0C  EF0C  F007         	goto	u980
  2876   000E10                     u981:
  2877   000E10  6A04               	clrf	??_read_RC_inputs^0,c
  2878   000E12  2A04               	incf	??_read_RC_inputs^0,f,c
  2879   000E14  EF0D  F007         	goto	u988
  2880   000E18                     u980:
  2881   000E18  6A04               	clrf	??_read_RC_inputs^0,c
  2882   000E1A                     u988:
  2883   000E1A  90D8               	bcf	status,0,c
  2884   000E1C  3604               	rlcf	??_read_RC_inputs^0,f,c
  2885   000E1E  90D8               	bcf	status,0,c
  2886   000E20  3604               	rlcf	??_read_RC_inputs^0,f,c
  2887   000E22  90D8               	bcf	status,0,c
  2888   000E24  3404               	rlcf	??_read_RC_inputs^0,w,c
  2889   000E26  1205               	iorwf	read_RC_inputs@result^0,f,c
  2890                           
  2891                           ;main.c: 75:     LATAbits.LATA1 = 0;
  2892   000E28  B882               	btfsc	130,4,c	;volatile
  2893   000E2A  EF19  F007         	goto	u991
  2894   000E2E  EF1D  F007         	goto	u990
  2895   000E32                     u991:
  2896   000E32  6A04               	clrf	??_read_RC_inputs^0,c
  2897   000E34  2A04               	incf	??_read_RC_inputs^0,f,c
  2898   000E36  EF1E  F007         	goto	u998
  2899   000E3A                     u990:
  2900   000E3A  6A04               	clrf	??_read_RC_inputs^0,c
  2901   000E3C                     u998:
  2902   000E3C  3804               	swapf	??_read_RC_inputs^0,w,c
  2903   000E3E  0BF0               	andlw	240
  2904   000E40  1205               	iorwf	read_RC_inputs@result^0,f,c
  2905   000E42                     
  2906                           ;main.c: 76:     LATAbits.LATA2 = 0;
  2907   000E42  5005               	movf	read_RC_inputs@result^0,w,c
  2908   000E44  0012               	return		;funcret
  2909   000E46                     __end_of_read_RC_inputs:
  2910                           	callstack 0
  2911                           
  2912 ;; *************** function _latch_data *****************
  2913 ;; Defined at:
  2914 ;;		line 45 in file "main.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  seg_data        1    wreg     unsigned char 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  seg_data        1    3[COMRAM] unsigned char 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      void 
  2921 ;; Registers used:
  2922 ;;		wreg
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2928 ;;      Params:         0       0       0       0       0       0       0
  2929 ;;      Locals:         1       0       0       0       0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0
  2931 ;;      Totals:         1       0       0       0       0       0       0
  2932 ;;Total ram usage:        1 bytes
  2933 ;; Hardware stack levels used: 1
  2934 ;; Hardware stack levels required when called: 1
  2935 ;; This function calls:
  2936 ;;		Nothing
  2937 ;; This function is called by:
  2938 ;;		_main
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text15
  2943   001168                     __ptext15:
  2944                           	callstack 0
  2945   001168                     _latch_data:
  2946                           	callstack 29
  2947                           
  2948                           ;incstack = 0
  2949                           ;latch_data@seg_data stored from wreg
  2950   001168  6E04               	movwf	latch_data@seg_data^0,c
  2951   00116A                     
  2952                           ;main.c: 45: ;main.c: 46:     TRISBbits.TRISB1 = 0;;main.c: 48: 
  2953   00116A  C004  FF8C         	movff	latch_data@seg_data,3980	;volatile
  2954   00116E                     
  2955                           ;main.c: 51:     TRISAbits.TRISA1 = 0;
  2956   00116E  928A               	bcf	138,1,c	;volatile
  2957   001170                     
  2958                           ;main.c: 52:     TRISAbits.TRISA2 = 0;
  2959   001170  0E08               	movlw	8
  2960   001172                     u1237:
  2961   001172  2EE8               	decfsz	wreg,f,c
  2962   001174  D7FE               	bra	u1237
  2963   001176  0000               	nop	
  2964   001178                     
  2965                           ;main.c: 53:     TRISAbits.TRISA3 = 0;
  2966   001178  828A               	bsf	138,1,c	;volatile
  2967   00117A                     
  2968                           ;main.c: 54:     TRISAbits.TRISA5 = 0;
  2969   00117A  0E08               	movlw	8
  2970   00117C                     u1247:
  2971   00117C  2EE8               	decfsz	wreg,f,c
  2972   00117E  D7FE               	bra	u1247
  2973   001180  0000               	nop	
  2974   001182                     
  2975                           ;main.c: 55:     TRISEbits.TRISE0 = 0;
  2976   001182  928A               	bcf	138,1,c	;volatile
  2977   001184  0012               	return		;funcret
  2978   001186                     __end_of_latch_data:
  2979                           	callstack 0
  2980                           
  2981 ;; *************** function _init_ports *****************
  2982 ;; Defined at:
  2983 ;;		line 79 in file "main.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;		None
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2997 ;;      Params:         0       0       0       0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0
  3000 ;;      Totals:         0       0       0       0       0       0       0
  3001 ;;Total ram usage:        0 bytes
  3002 ;; Hardware stack levels used: 1
  3003 ;; Hardware stack levels required when called: 2
  3004 ;; This function calls:
  3005 ;;		_init_inputs_RC0_to_RC4
  3006 ;; This function is called by:
  3007 ;;		_main
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text16
  3012   001186                     __ptext16:
  3013                           	callstack 0
  3014   001186                     _init_ports:
  3015                           	callstack 28
  3016   001186                     
  3017                           ;main.c: 83:     {
  3018   001186  9293               	bcf	147,1,c	;volatile
  3019                           
  3020                           ;main.c: 87:         case 5:
  3021   001188  9092               	bcf	146,0,c	;volatile
  3022                           
  3023                           ;main.c: 88:             LATAbits.LATA1 = 1;
  3024   00118A  9292               	bcf	146,1,c	;volatile
  3025                           
  3026                           ;main.c: 89:             break;
  3027   00118C  9492               	bcf	146,2,c	;volatile
  3028                           
  3029                           ;main.c: 90:         case 4:
  3030   00118E  9692               	bcf	146,3,c	;volatile
  3031                           
  3032                           ;main.c: 91:             LATAbits.LATA2 = 1;
  3033   001190  9A92               	bcf	146,5,c	;volatile
  3034                           
  3035                           ;main.c: 92:             break;
  3036   001192  9096               	bcf	150,0,c	;volatile
  3037                           
  3038                           ;main.c: 94:             LATAbits.LATA3 = 1;
  3039   001194  928A               	bcf	138,1,c	;volatile
  3040                           
  3041                           ;main.c: 96: 
  3042   001196  9A94               	bcf	148,5,c	;volatile
  3043                           
  3044                           ;main.c: 97:         case 2:
  3045   001198  9A8B               	bcf	139,5,c	;volatile
  3046                           
  3047                           ;main.c: 100: 
  3048   00119A  9093               	bcf	147,0,c	;volatile
  3049                           
  3050                           ;main.c: 102:             LATAbits.LATA5 = 1;
  3051   00119C  908A               	bcf	138,0,c	;volatile
  3052   00119E                     
  3053                           ;main.c: 104:         default:
  3054   00119E  ECEC  F008         	call	_init_inputs_RC0_to_RC4	;wreg free
  3055   0011A2  0012               	return		;funcret
  3056   0011A4                     __end_of_init_ports:
  3057                           	callstack 0
  3058                           
  3059 ;; *************** function _init_inputs_RC0_to_RC4 *****************
  3060 ;; Defined at:
  3061 ;;		line 58 in file "main.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;		None
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;		None
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		None
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3075 ;;      Params:         0       0       0       0       0       0       0
  3076 ;;      Locals:         0       0       0       0       0       0       0
  3077 ;;      Temps:          0       0       0       0       0       0       0
  3078 ;;      Totals:         0       0       0       0       0       0       0
  3079 ;;Total ram usage:        0 bytes
  3080 ;; Hardware stack levels used: 1
  3081 ;; Hardware stack levels required when called: 1
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_init_ports
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text17
  3090   0011D8                     __ptext17:
  3091                           	callstack 0
  3092   0011D8                     _init_inputs_RC0_to_RC4:
  3093                           	callstack 28
  3094   0011D8                     
  3095                           ;main.c: 60:     LATCbits.LATC5 = 0;
  3096   0011D8  8094               	bsf	148,0,c	;volatile
  3097                           
  3098                           ;main.c: 61: 
  3099   0011DA  8294               	bsf	148,1,c	;volatile
  3100                           
  3101                           ;main.c: 62: 
  3102   0011DC  8494               	bsf	148,2,c	;volatile
  3103                           
  3104                           ;main.c: 63:     TRISBbits.TRISB0 = 0;
  3105   0011DE  8694               	bsf	148,3,c	;volatile
  3106                           
  3107                           ;main.c: 64: 
  3108   0011E0  8894               	bsf	148,4,c	;volatile
  3109   0011E2  0012               	return		;funcret
  3110   0011E4                     __end_of_init_inputs_RC0_to_RC4:
  3111                           	callstack 0
  3112                           
  3113 ;; *************** function _delay_ms *****************
  3114 ;; Defined at:
  3115 ;;		line 37 in file "main.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  ms              2    3[COMRAM] unsigned int 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      void 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3129 ;;      Params:         2       0       0       0       0       0       0
  3130 ;;      Locals:         0       0       0       0       0       0       0
  3131 ;;      Temps:          1       0       0       0       0       0       0
  3132 ;;      Totals:         3       0       0       0       0       0       0
  3133 ;;Total ram usage:        3 bytes
  3134 ;; Hardware stack levels used: 1
  3135 ;; Hardware stack levels required when called: 1
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_main
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text18
  3144   001114                     __ptext18:
  3145                           	callstack 0
  3146   001114                     _delay_ms:
  3147                           	callstack 29
  3148   001114                     
  3149                           ;main.c: 37:     result |= (PORTCbits.RC3 << 3);;main.c: 38:     result |= (PORTCbits.RC
      +                          4 << 4);;main.c: 39:     return result;
  3150   001114  EF93  F008         	goto	l1576
  3151   001118                     l1574:
  3152                           
  3153                           ;main.c: 40: };main.c: 41: 
  3154   001118  0E04               	movlw	4
  3155   00111A  6E06               	movwf	??_delay_ms^0,c
  3156   00111C  0E3E               	movlw	62
  3157   00111E                     u1257:
  3158   00111E  2EE8               	decfsz	wreg,f,c
  3159   001120  D7FE               	bra	u1257
  3160   001122  2E06               	decfsz	??_delay_ms^0,f,c
  3161   001124  D7FC               	bra	u1257
  3162   001126                     l1576:
  3163                           
  3164                           ;main.c: 39:     return result;
  3165   001126  0604               	decf	delay_ms@ms^0,f,c
  3166   001128  A0D8               	btfss	status,0,c
  3167   00112A  0605               	decf	(delay_ms@ms+1)^0,f,c
  3168   00112C  2804               	incf	delay_ms@ms^0,w,c
  3169   00112E  E106               	bnz	u941
  3170   001130  2805               	incf	(delay_ms@ms+1)^0,w,c
  3171   001132  A4D8               	btfss	status,2,c
  3172   001134  EF9E  F008         	goto	u941
  3173   001138  EFA0  F008         	goto	u940
  3174   00113C                     u941:
  3175   00113C  EF8C  F008         	goto	l1574
  3176   001140                     u940:
  3177   001140  0012               	return		;funcret
  3178   001142                     __end_of_delay_ms:
  3179                           	callstack 0
  3180                           
  3181 ;; *************** function _UART_SendString *****************
  3182 ;; Defined at:
  3183 ;;		line 44 in file "u_uart.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  str             2    4[COMRAM] PTR const unsigned char 
  3186 ;;		 -> STR_26(3), STR_25(19), buffer(20), STR_3(11), 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;		None
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3198 ;;      Params:         2       0       0       0       0       0       0
  3199 ;;      Locals:         0       0       0       0       0       0       0
  3200 ;;      Temps:          0       0       0       0       0       0       0
  3201 ;;      Totals:         2       0       0       0       0       0       0
  3202 ;;Total ram usage:        2 bytes
  3203 ;; Hardware stack levels used: 1
  3204 ;; Hardware stack levels required when called: 2
  3205 ;; This function calls:
  3206 ;;		_UART_SendChar
  3207 ;; This function is called by:
  3208 ;;		_main
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text19
  3213   000F3E                     __ptext19:
  3214                           	callstack 0
  3215   000F3E                     _UART_SendString:
  3216                           	callstack 28
  3217   000F3E                     
  3218                           ;u_uart.c: 44: void UART_SendString(const char* str);u_uart.c: 45: {;u_uart.c: 46:     w
      +                          hile (*str)
  3219   000F3E  EFB5  F007         	goto	l1658
  3220   000F42                     l1654:
  3221                           
  3222                           ;u_uart.c: 47:         UART_SendChar(*str++);
  3223   000F42  C005  FFF6         	movff	UART_SendString@str,tblptrl
  3224   000F46  C006  FFF7         	movff	UART_SendString@str+1,tblptrh
  3225   000F4A  6AF8               	clrf	tblptru,c
  3226   000F4C  0E05               	movlw	(high __ramtop+-1)
  3227   000F4E  64F7               	cpfsgt	tblptrh,c
  3228   000F50  D003               	bra	u1047
  3229   000F52  0008               	tblrd		*
  3230   000F54  50F5               	movf	tablat,w,c
  3231   000F56  D005               	bra	u1040
  3232   000F58                     u1047:
  3233   000F58  CFF6 FFE1          	movff	tblptrl,fsr1l
  3234   000F5C  CFF7 FFE2          	movff	tblptrh,fsr1h
  3235   000F60  50E7               	movf	indf1,w,c
  3236   000F62                     u1040:
  3237   000F62  ECE1  F008         	call	_UART_SendChar
  3238   000F66  4A05               	infsnz	UART_SendString@str^0,f,c
  3239   000F68  2A06               	incf	(UART_SendString@str+1)^0,f,c
  3240   000F6A                     l1658:
  3241                           
  3242                           ;u_uart.c: 46:     while (*str)
  3243   000F6A  C005  FFF6         	movff	UART_SendString@str,tblptrl
  3244   000F6E  C006  FFF7         	movff	UART_SendString@str+1,tblptrh
  3245   000F72  6AF8               	clrf	tblptru,c
  3246   000F74  0E05               	movlw	(high __ramtop+-1)
  3247   000F76  64F7               	cpfsgt	tblptrh,c
  3248   000F78  D003               	bra	u1057
  3249   000F7A  0008               	tblrd		*
  3250   000F7C  50F5               	movf	tablat,w,c
  3251   000F7E  D005               	bra	u1050
  3252   000F80                     u1057:
  3253   000F80  CFF6 FFE1          	movff	tblptrl,fsr1l
  3254   000F84  CFF7 FFE2          	movff	tblptrh,fsr1h
  3255   000F88  50E7               	movf	indf1,w,c
  3256   000F8A                     u1050:
  3257   000F8A  0900               	iorlw	0
  3258   000F8C  A4D8               	btfss	status,2,c
  3259   000F8E  EFCB  F007         	goto	u1061
  3260   000F92  EFCD  F007         	goto	u1060
  3261   000F96                     u1061:
  3262   000F96  EFA1  F007         	goto	l1654
  3263   000F9A                     u1060:
  3264   000F9A  0012               	return		;funcret
  3265   000F9C                     __end_of_UART_SendString:
  3266                           	callstack 0
  3267                           
  3268 ;; *************** function _UART_SendChar *****************
  3269 ;; Defined at:
  3270 ;;		line 37 in file "u_uart.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  ch              1    wreg     unsigned char 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  ch              1    3[COMRAM] unsigned char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         0       0       0       0       0       0       0
  3285 ;;      Locals:         1       0       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0
  3287 ;;      Totals:         1       0       0       0       0       0       0
  3288 ;;Total ram usage:        1 bytes
  3289 ;; Hardware stack levels used: 1
  3290 ;; Hardware stack levels required when called: 1
  3291 ;; This function calls:
  3292 ;;		Nothing
  3293 ;; This function is called by:
  3294 ;;		_main
  3295 ;;		_UART_SendString
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text20
  3300   0011C2                     __ptext20:
  3301                           	callstack 0
  3302   0011C2                     _UART_SendChar:
  3303                           	callstack 28
  3304                           
  3305                           ;incstack = 0
  3306                           ;UART_SendChar@ch stored from wreg
  3307   0011C2  6E04               	movwf	UART_SendChar@ch^0,c
  3308   0011C4                     l147:
  3309                           
  3310                           ;u_uart.c: 39:     while (!TXIF)
  3311   0011C4  A89E               	btfss	3998,4,c	;volatile
  3312   0011C6  EFE7  F008         	goto	u841
  3313   0011CA  EFE9  F008         	goto	u840
  3314   0011CE                     u841:
  3315   0011CE  EFE2  F008         	goto	l147
  3316   0011D2                     u840:
  3317   0011D2                     
  3318                           ;u_uart.c: 41:     TXREG = ch;
  3319   0011D2  C004  FFAD         	movff	UART_SendChar@ch,4013	;volatile
  3320   0011D6  0012               	return		;funcret
  3321   0011D8                     __end_of_UART_SendChar:
  3322                           	callstack 0
  3323                           
  3324 ;; *************** function _UART_Init *****************
  3325 ;; Defined at:
  3326 ;;		line 17 in file "u_uart.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;		None
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;		None
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      void 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3340 ;;      Params:         0       0       0       0       0       0       0
  3341 ;;      Locals:         0       0       0       0       0       0       0
  3342 ;;      Temps:          0       0       0       0       0       0       0
  3343 ;;      Totals:         0       0       0       0       0       0       0
  3344 ;;Total ram usage:        0 bytes
  3345 ;; Hardware stack levels used: 1
  3346 ;; Hardware stack levels required when called: 1
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_main
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text21
  3355   0011A4                     __ptext21:
  3356                           	callstack 0
  3357   0011A4                     _UART_Init:
  3358                           	callstack 29
  3359   0011A4                     
  3360                           ;u_uart.c: 19:     TRISC6 = 0;
  3361   0011A4  9C94               	bcf	3988,6,c	;volatile
  3362                           
  3363                           ;u_uart.c: 20:     TRISC7 = 1;
  3364   0011A6  8E94               	bsf	3988,7,c	;volatile
  3365   0011A8                     
  3366                           ;u_uart.c: 22:     SPBRG = 15;
  3367   0011A8  0E0F               	movlw	15
  3368   0011AA  6EAF               	movwf	175,c	;volatile
  3369   0011AC                     
  3370                           ;u_uart.c: 23:     BRGH = 0;
  3371   0011AC  94AC               	bcf	4012,2,c	;volatile
  3372   0011AE                     
  3373                           ;u_uart.c: 24:     BRG16 = 0;
  3374   0011AE  96B8               	bcf	4024,3,c	;volatile
  3375   0011B0                     
  3376                           ;u_uart.c: 26:     SYNC = 0;
  3377   0011B0  98AC               	bcf	4012,4,c	;volatile
  3378   0011B2                     
  3379                           ;u_uart.c: 27:     SPEN = 1;
  3380   0011B2  8EAB               	bsf	4011,7,c	;volatile
  3381   0011B4                     
  3382                           ;u_uart.c: 28:     TXEN = 1;
  3383   0011B4  8AAC               	bsf	4012,5,c	;volatile
  3384   0011B6                     
  3385                           ;u_uart.c: 29:     CREN = 1;
  3386   0011B6  88AB               	bsf	4011,4,c	;volatile
  3387   0011B8                     
  3388                           ;u_uart.c: 31:     RCIF = 0;
  3389   0011B8  9A9E               	bcf	3998,5,c	;volatile
  3390   0011BA                     
  3391                           ;u_uart.c: 32:     RCIE = 1;
  3392   0011BA  8A9D               	bsf	3997,5,c	;volatile
  3393   0011BC                     
  3394                           ;u_uart.c: 33:     PEIE = 1;
  3395   0011BC  8CF2               	bsf	4082,6,c	;volatile
  3396   0011BE                     
  3397                           ;u_uart.c: 34:     GIE = 1;
  3398   0011BE  8EF2               	bsf	4082,7,c	;volatile
  3399   0011C0  0012               	return		;funcret
  3400   0011C2                     __end_of_UART_Init:
  3401                           	callstack 0
  3402                           
  3403 ;; *************** function _SelectIO *****************
  3404 ;; Defined at:
  3405 ;;		line 108 in file "main.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  index           1    wreg     unsigned char 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  index           1    3[COMRAM] unsigned char 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3419 ;;      Params:         0       0       0       0       0       0       0
  3420 ;;      Locals:         1       0       0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0
  3422 ;;      Totals:         1       0       0       0       0       0       0
  3423 ;;Total ram usage:        1 bytes
  3424 ;; Hardware stack levels used: 1
  3425 ;; Hardware stack levels required when called: 1
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text22
  3434   000ED0                     __ptext22:
  3435                           	callstack 0
  3436   000ED0                     _SelectIO:
  3437                           	callstack 29
  3438                           
  3439                           ;incstack = 0
  3440                           ;SelectIO@index stored from wreg
  3441   000ED0  6E04               	movwf	SelectIO@index^0,c
  3442   000ED2                     
  3443                           ;main.c: 108: ;main.c: 109: char buffer[20];;main.c: 111: void main(void)
  3444   000ED2  9089               	bcf	137,0,c	;volatile
  3445                           
  3446                           ;main.c: 112: {
  3447   000ED4  9289               	bcf	137,1,c	;volatile
  3448                           
  3449                           ;main.c: 113:     delay_ms(500);
  3450   000ED6  9489               	bcf	137,2,c	;volatile
  3451                           
  3452                           ;main.c: 114: 
  3453   000ED8  9689               	bcf	137,3,c	;volatile
  3454                           
  3455                           ;main.c: 115:     UART_Init();
  3456   000EDA  9A89               	bcf	137,5,c	;volatile
  3457                           
  3458                           ;main.c: 116: 
  3459   000EDC  908D               	bcf	141,0,c	;volatile
  3460                           
  3461                           ;main.c: 119: 
  3462   000EDE  EF83  F007         	goto	l1606
  3463   000EE2                     l60:
  3464                           
  3465                           ;main.c: 122: 
  3466   000EE2  8089               	bsf	137,0,c	;volatile
  3467                           
  3468                           ;main.c: 123:     while (1)
  3469   000EE4  EF9E  F007         	goto	l68
  3470   000EE8                     l62:
  3471                           
  3472                           ;main.c: 125:         if (uart_frame_ready)
  3473   000EE8  8289               	bsf	137,1,c	;volatile
  3474                           
  3475                           ;main.c: 126:         {
  3476   000EEA  EF9E  F007         	goto	l68
  3477   000EEE                     l63:
  3478                           
  3479                           ;main.c: 128: 
  3480   000EEE  8489               	bsf	137,2,c	;volatile
  3481                           
  3482                           ;main.c: 129:             if (strstr((char*)uart_rx_buffer, "CONN_REQ"))
  3483   000EF0  EF9E  F007         	goto	l68
  3484   000EF4                     l64:
  3485                           
  3486                           ;main.c: 131:                 UART_SendString("CONN_ACK\r\n");
  3487   000EF4  8689               	bsf	137,3,c	;volatile
  3488                           
  3489                           ;main.c: 132:             }
  3490   000EF6  EF9E  F007         	goto	l68
  3491   000EFA                     l65:
  3492                           
  3493                           ;main.c: 135: 
  3494   000EFA  808D               	bsf	141,0,c	;volatile
  3495                           
  3496                           ;main.c: 136:                 SelectIO(1);
  3497   000EFC  EF9E  F007         	goto	l68
  3498   000F00                     l66:
  3499                           
  3500                           ;main.c: 139:             {
  3501   000F00  8A89               	bsf	137,5,c	;volatile
  3502                           
  3503                           ;main.c: 140: 
  3504   000F02  EF9E  F007         	goto	l68
  3505   000F06                     l1606:
  3506   000F06  5004               	movf	SelectIO@index^0,w,c
  3507                           
  3508                           ; Switch size 1, requested type "simple"
  3509                           ; Number of cases is 6, Range of values is 1 to 6
  3510                           ; switch strategies available:
  3511                           ; Name         Instructions Cycles
  3512                           ; simple_byte           19    10 (average)
  3513                           ;	Chosen strategy is simple_byte
  3514   000F08  0A01               	xorlw	1	; case 1
  3515   000F0A  B4D8               	btfsc	status,2,c
  3516   000F0C  EF80  F007         	goto	l66
  3517   000F10  0A03               	xorlw	3	; case 2
  3518   000F12  B4D8               	btfsc	status,2,c
  3519   000F14  EF7D  F007         	goto	l65
  3520   000F18  0A01               	xorlw	1	; case 3
  3521   000F1A  B4D8               	btfsc	status,2,c
  3522   000F1C  EF7A  F007         	goto	l64
  3523   000F20  0A07               	xorlw	7	; case 4
  3524   000F22  B4D8               	btfsc	status,2,c
  3525   000F24  EF77  F007         	goto	l63
  3526   000F28  0A01               	xorlw	1	; case 5
  3527   000F2A  B4D8               	btfsc	status,2,c
  3528   000F2C  EF74  F007         	goto	l62
  3529   000F30  0A03               	xorlw	3	; case 6
  3530   000F32  B4D8               	btfsc	status,2,c
  3531   000F34  EF71  F007         	goto	l60
  3532   000F38  EF9E  F007         	goto	l68
  3533   000F3C                     l68:
  3534   000F3C  0012               	return		;funcret
  3535   000F3E                     __end_of_SelectIO:
  3536                           	callstack 0
  3537                           
  3538 ;; *************** function _ISR *****************
  3539 ;; Defined at:
  3540 ;;		line 51 in file "u_uart.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  received        1    2[COMRAM] unsigned char 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3554 ;;      Params:         0       0       0       0       0       0       0
  3555 ;;      Locals:         1       0       0       0       0       0       0
  3556 ;;      Temps:          2       0       0       0       0       0       0
  3557 ;;      Totals:         3       0       0       0       0       0       0
  3558 ;;Total ram usage:        3 bytes
  3559 ;; Hardware stack levels used: 1
  3560 ;; This function calls:
  3561 ;;		Nothing
  3562 ;; This function is called by:
  3563 ;;		Interrupt level 2
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           	psect	intcode
  3568   000008                     __pintcode:
  3569                           	callstack 0
  3570   000008                     _ISR:
  3571                           	callstack 22
  3572                           
  3573                           ;incstack = 0
  3574   000008  8268               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3575   00000A  EDCE  F007         	call	int_func,f	;refresh shadow registers
  3576                           
  3577                           	psect	intcode_body
  3578   000F9C                     __pintcode_body:
  3579                           	callstack 22
  3580   000F9C                     int_func:
  3581                           	callstack 22
  3582   000F9C  0006               	pop		; remove dummy address from shadow register refresh
  3583   000F9E  CFD9 F001          	movff	fsr2l,??_ISR
  3584   000FA2  CFDA F002          	movff	fsr2h,??_ISR+1
  3585   000FA6                     
  3586                           ;u_uart.c: 53:     if (RCIF)
  3587   000FA6  AA9E               	btfss	3998,5,c	;volatile
  3588   000FA8  EFD8  F007         	goto	i2u120_41
  3589   000FAC  EFDA  F007         	goto	i2u120_40
  3590   000FB0                     i2u120_41:
  3591   000FB0  EFF6  F007         	goto	i2l164
  3592   000FB4                     i2u120_40:
  3593   000FB4                     
  3594                           ;u_uart.c: 54:     {;u_uart.c: 55:         uint8_t received = RCREG;
  3595   000FB4  CFAE F003          	movff	4014,ISR@received	;volatile
  3596   000FB8                     
  3597                           ;u_uart.c: 57:         if (uart_frame_ready == 0)
  3598   000FB8  5049               	movf	_uart_frame_ready^0,w,c	;volatile
  3599   000FBA  A4D8               	btfss	status,2,c
  3600   000FBC  EFE2  F007         	goto	i2u121_41
  3601   000FC0  EFE4  F007         	goto	i2u121_40
  3602   000FC4                     i2u121_41:
  3603   000FC4  EFF6  F007         	goto	i2l164
  3604   000FC8                     i2u121_40:
  3605   000FC8                     
  3606                           ;u_uart.c: 58:         {;u_uart.c: 59:             uart_rx_buffer[uart_rx_index++] = rec
      +                          eived;
  3607   000FC8  5048               	movf	_uart_rx_index^0,w,c
  3608   000FCA  0F5E               	addlw	low _uart_rx_buffer
  3609   000FCC  6ED9               	movwf	fsr2l,c
  3610   000FCE  6ADA               	clrf	fsr2h,c
  3611   000FD0  C003  FFDF         	movff	ISR@received,indf2
  3612   000FD4  2A48               	incf	_uart_rx_index^0,f,c	;volatile
  3613   000FD6                     
  3614                           ;u_uart.c: 60:             if (uart_rx_index >= 10)
  3615   000FD6  0E09               	movlw	9
  3616   000FD8  6448               	cpfsgt	_uart_rx_index^0,c	;volatile
  3617   000FDA  EFF1  F007         	goto	i2u122_41
  3618   000FDE  EFF3  F007         	goto	i2u122_40
  3619   000FE2                     i2u122_41:
  3620   000FE2  EFF6  F007         	goto	i2l164
  3621   000FE6                     i2u122_40:
  3622   000FE6                     
  3623                           ;u_uart.c: 61:             {;u_uart.c: 62:                 uart_frame_ready = 1;
  3624   000FE6  0E01               	movlw	1
  3625   000FE8  6E49               	movwf	_uart_frame_ready^0,c	;volatile
  3626   000FEA                     
  3627                           ;u_uart.c: 63:                 uart_rx_index = 0;
  3628   000FEA  6A48               	clrf	_uart_rx_index^0,c	;volatile
  3629   000FEC                     i2l164:
  3630   000FEC  C002  FFDA         	movff	??_ISR+1,fsr2h
  3631   000FF0  C001  FFD9         	movff	??_ISR,fsr2l
  3632   000FF4  9268               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3633   000FF6  0011               	retfie		f
  3634   000FF8                     __end_of_ISR:
  3635                           	callstack 0
  3636                           
  3637                           	psect	rparam
  3638   000001                     ___rparam_used  equ	1
  3639   000000                     ___param_bank   equ	0
  3640   000000                     __Lparam        equ	__Lrparam
  3641   000000                     __Hparam        equ	__Hrparam
  3642                           
  3643                           	psect	temp
  3644   000068                     btemp:
  3645                           	callstack 0
  3646   000068                     	ds	1
  3647   000068                     int$flags       set	btemp
  3648   000069                     wtemp8          set	btemp+1
  3649   000069                     ttemp5          set	btemp+1
  3650   00006C                     ttemp6          set	btemp+4
  3651   000070                     ttemp7          set	btemp+8
  3652                           
  3653                           	psect	config
  3654                           
  3655                           ; Padding undefined space
  3656   300000                     	org	3145728
  3657   300000  FF                 	db	255
  3658                           
  3659                           ;Config register CONFIG1H @ 0x300001
  3660                           ;	Oscillator Selection bits
  3661                           ;	OSC = HS, HS oscillator
  3662                           ;	Fail-Safe Clock Monitor Enable bit
  3663                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3664                           ;	Internal/External Oscillator Switchover bit
  3665                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3666   300001                     	org	3145729
  3667   300001  02                 	db	2
  3668                           
  3669                           ;Config register CONFIG2L @ 0x300002
  3670                           ;	Power-up Timer Enable bit
  3671                           ;	PWRT = OFF, PWRT disabled
  3672                           ;	Brown-out Reset Enable bits
  3673                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3674                           ;	Brown Out Reset Voltage bits
  3675                           ;	BORV = 3, Minimum setting
  3676   300002                     	org	3145730
  3677   300002  19                 	db	25
  3678                           
  3679                           ;Config register CONFIG2H @ 0x300003
  3680                           ;	Watchdog Timer Enable bit
  3681                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3682                           ;	Watchdog Timer Postscale Select bits
  3683                           ;	WDTPS = 32768, 1:32768
  3684   300003                     	org	3145731
  3685   300003  1E                 	db	30
  3686                           
  3687                           ; Padding undefined space
  3688   300004                     	org	3145732
  3689   300004  FF                 	db	255
  3690                           
  3691                           ;Config register CONFIG3H @ 0x300005
  3692                           ;	CCP2 MUX bit
  3693                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3694                           ;	PORTB A/D Enable bit
  3695                           ;	PBADEN = 0x1, unprogrammed default
  3696                           ;	Low-Power Timer1 Oscillator Enable bit
  3697                           ;	LPT1OSC = 0x0, unprogrammed default
  3698                           ;	MCLR Pin Enable bit
  3699                           ;	MCLRE = 0x1, unprogrammed default
  3700   300005                     	org	3145733
  3701   300005  83                 	db	131
  3702                           
  3703                           ;Config register CONFIG4L @ 0x300006
  3704                           ;	Stack Full/Underflow Reset Enable bit
  3705                           ;	STVREN = 0x1, unprogrammed default
  3706                           ;	Single-Supply ICSP Enable bit
  3707                           ;	LVP = OFF, Single-Supply ICSP disabled
  3708                           ;	Extended Instruction Set Enable bit
  3709                           ;	XINST = 0x0, unprogrammed default
  3710                           ;	Background Debugger Enable bit
  3711                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  3712   300006                     	org	3145734
  3713   300006  81                 	db	129
  3714                           
  3715                           ; Padding undefined space
  3716   300007                     	org	3145735
  3717   300007  FF                 	db	255
  3718                           tosu	equ	0xFFF
  3719                           tosh	equ	0xFFE
  3720                           tosl	equ	0xFFD
  3721                           stkptr	equ	0xFFC
  3722                           pclatu	equ	0xFFB
  3723                           pclath	equ	0xFFA
  3724                           pcl	equ	0xFF9
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           indf0	equ	0xFEF
  3732                           postinc0	equ	0xFEE
  3733                           postdec0	equ	0xFED
  3734                           preinc0	equ	0xFEC
  3735                           plusw0	equ	0xFEB
  3736                           fsr0h	equ	0xFEA
  3737                           fsr0l	equ	0xFE9
  3738                           wreg	equ	0xFE8
  3739                           indf1	equ	0xFE7
  3740                           postinc1	equ	0xFE6
  3741                           postdec1	equ	0xFE5
  3742                           preinc1	equ	0xFE4
  3743                           plusw1	equ	0xFE3
  3744                           fsr1h	equ	0xFE2
  3745                           fsr1l	equ	0xFE1
  3746                           bsr	equ	0xFE0
  3747                           indf2	equ	0xFDF
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           preinc2	equ	0xFDC
  3751                           plusw2	equ	0xFDB
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8

Data Sizes:
    Strings     139
    Constant    0
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     103
    BANK0           128      0      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(COMRAM[20]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(COMRAM[20]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S1014$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(COMRAM[20]), 

    S1014$source	PTR const unsigned char  size(2) Largest target is 0

    sp__strchr	PTR unsigned char  size(1) Largest target is 10
		 -> uart_rx_buffer(COMRAM[10]), NULL(NULL[0]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 10
		 -> uart_rx_buffer(COMRAM[10]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_20(CODE[10]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(COMRAM[20]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 10
		 -> uart_rx_buffer(COMRAM[10]), NULL(NULL[0]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_11(CODE[9]), STR_13(CODE[9]), STR_15(CODE[9]), STR_17(CODE[9]), 
		 -> STR_19(CODE[9]), STR_2(CODE[9]), STR_22(CODE[9]), STR_24(CODE[9]), 
		 -> STR_5(CODE[9]), STR_7(CODE[9]), STR_9(CODE[9]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_11(CODE[9]), STR_13(CODE[9]), STR_15(CODE[9]), STR_17(CODE[9]), 
		 -> STR_19(CODE[9]), STR_2(CODE[9]), STR_22(CODE[9]), STR_24(CODE[9]), 
		 -> STR_5(CODE[9]), STR_7(CODE[9]), STR_9(CODE[9]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 10
		 -> uart_rx_buffer(COMRAM[10]), NULL(NULL[0]), 

    strncmp@r	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_11(CODE[9]), STR_13(CODE[9]), STR_15(CODE[9]), STR_17(CODE[9]), 
		 -> STR_19(CODE[9]), STR_2(CODE[9]), STR_22(CODE[9]), STR_24(CODE[9]), 
		 -> STR_5(CODE[9]), STR_7(CODE[9]), STR_9(CODE[9]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 10
		 -> uart_rx_buffer(COMRAM[10]), NULL(NULL[0]), 

    strstr@n	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_11(CODE[9]), STR_13(CODE[9]), STR_15(CODE[9]), STR_17(CODE[9]), 
		 -> STR_19(CODE[9]), STR_2(CODE[9]), STR_22(CODE[9]), STR_24(CODE[9]), 
		 -> STR_5(CODE[9]), STR_7(CODE[9]), STR_9(CODE[9]), 

    UART_SendString@str	PTR const unsigned char  size(2) Largest target is 20
		 -> buffer(COMRAM[20]), STR_25(CODE[19]), STR_26(CODE[3]), STR_3(CODE[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 10
		 -> STR_20(CODE[10]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 10
		 -> STR_20(CODE[10]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_20(CODE[10]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _strstr->_strncmp
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _UART_SendString->_UART_SendChar

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3135
                                             64 COMRAM     2     2      0
                           _SelectIO
                          _UART_Init
                      _UART_SendChar
                    _UART_SendString
                           _delay_ms
                         _init_ports
                         _latch_data
                     _read_RC_inputs
                            _sprintf
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _strstr                                               4     2      2     607
                                              8 COMRAM     4     2      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              5     1      4     182
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _strlen                                               3     1      2      91
                                              3 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _strchr                                               4     1      3      90
                                              3 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    14      4    2221
                                             48 COMRAM    16    12      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    2018
                                             44 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           10     7      3    1884
                                             35 COMRAM     9     6      3
                              _fputc
                 _read_prec_or_width
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                12     9      3    1045
                                             23 COMRAM    12     9      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4     747
                                             16 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2     333
                                             11 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3     232
                                              3 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   7     5      2     182
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _read_RC_inputs                                       2     2      0      28
                                              3 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _latch_data                                           1     1      0      29
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
             _init_inputs_RC0_to_RC4
 ---------------------------------------------------------------------------------
 (2) _init_inputs_RC0_to_RC4                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             3     1      2      23
                                              3 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _UART_SendString                                      2     0      2      78
                                              4 COMRAM     2     0      2
                      _UART_SendChar
 ---------------------------------------------------------------------------------
 (2) _UART_SendChar                                        1     1      0      29
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SelectIO                                             1     1      0      29
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  3     3      0      23
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SelectIO
   _UART_Init
   _UART_SendChar
   _UART_SendString
     _UART_SendChar
   _delay_ms
   _init_ports
     _init_inputs_RC0_to_RC4
   _latch_data
   _read_RC_inputs
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _read_prec_or_width
         _xtoa
           _pad
             _fputc
             _fputs
               _fputc
   _strstr
     _strchr
     _strlen
     _strncmp

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0      32     25.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     66     103     81.7%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         35      0       0      0.0%
BITBIGSFRllh         6      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     137      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Sat May 17 20:38:37 2025

                            l50 11E2                              l60 0EE2                              l44 1140  
                            l53 0E44                              l62 0EE8                              l63 0EEE  
                            l47 1184                              l64 0EF4                              l56 11A2  
                            l65 0EFA                              l66 0F00                              l68 0F3C  
                           l150 11D6                             l144 11C0                             l147 11C4  
                           l156 0F9A                             l912 1034                             l905 0A22  
                           l924 0C7E                             l932 1070                             l845 1112  
                           l935 11E4                             l863 0E76                             l880 0B18  
                           l866 0EB4                             l954 1072                             l963 10DE  
                           l884 0D1A                             l868 0ECE                             l956 10AA  
                           l948 0DB6                             l967 0BD4                             l888 0D22  
                           _GIE 7F97                             u620 0BE6                             u700 0EC2  
                           _ISR 0008                             u621 0BE2                             u701 0EBE  
                           u630 0BF6                             u710 0A5C                             u631 0BF2  
                           u711 0A58                             u640 0C1C                             u800 08EE  
                           u641 0C18                             u801 08EA                             u650 0C4E  
                           u730 0AB8                             u810 0950                             u651 0C4A  
                           u731 0AB4                             u811 094C                             u660 1070  
                           u740 0ACA                             u820 0972                             u900 0B8E  
                           u661 106C                             u741 0AC6                             u725 0A88  
                           u821 096E                             u901 0B8A                             u670 0E54  
                           u750 0ADA                             u830 09A2                             u910 0BB4  
                           u671 0E50                             u751 0AD6                             u831 099E  
                           u911 0BB0                             u840 11D2                             u680 0E6E  
                           u760 0AF4                             u920 108A                             u841 11CE  
                           u681 0E6A                             u761 0AF0                             u921 1086  
                           u690 0EB4                             u770 0B02                             u850 102C  
                           u930 10A8                             u691 0EB0                             u771 0AFE  
                           u851 1028                             u931 10A4                             u940 1140  
                           u780 0CAA                             u860 10D2                             u941 113C  
                           u781 0CA6                             u861 10CE                             u950 0DCA  
                           u790 0D1A                             u870 0B34                             u951 0DC4  
                           u791 0D16                             u871 0B30                             u960 0DE0  
                           u880 0B60                             u961 0DD8                             u881 0B5C  
                           u970 0DFA                             u890 0B7C                             u971 0DF2  
                           u891 0B78                             u980 0E18                             u956 0DCC  
                           u981 0E10                             u990 0E3A                             u991 0E32  
                           u968 0DE2                             u978 0DFC                             u988 0E1A  
                           u998 0E3C                             _pad 0E46                             wreg 0FE8  
                          ?_ISR 0001                            l1400 0E82                            l1402 0E92  
                          l1410 0A28                            l1404 0E96                            l1420 0A5C  
                          l1412 0A38                            l1406 0EC2                            l1430 0A7C  
                          l1422 0A64                            l1414 0A40                            l1502 09DC  
                          l1600 119E                            l1440 0AF4                            l1424 0A68  
                          l1416 0A46                            l1432 0A9C                            l1408 0A24  
                          l1504 09F4                            l1520 0FF8                            l1602 0ED2  
                          l1610 11A8                            l1514 11D8                            l1450 0CAA  
                          l1370 0BD6                            l1434 0AB8                            l1442 0B02  
                          l1426 0A74                            l1418 0A4C                            l1522 1000  
                          l1530 10AC                            l1620 11B4                            l1612 11AC  
                          l1516 11C4                            l1452 0CB2                            l1380 0C4E  
                          l1372 0BE6                            l1436 0ACA                            l1428 0A76  
                          l1508 0A00                            l1460 08CC                            l1524 1010  
                          l1532 10B4                            l1540 0B1A                            l1700 0758  
                          l1606 0F06                            l1630 11BE                            l1622 11B6  
                          l1614 11AE                            l1518 11D2                            l1454 0CCE  
                          l1446 0C80                            l1374 0BF6                            l1390 1054  
                          l1438 0ADA                            l1470 090C                            l1462 08EE  
                          l1526 102C                            l1534 10B6                            l1550 0B60  
                          l1542 0B34                            l1710 07AE                            l1702 0762  
                          l1624 11B8                            l1616 11B0                            l1608 11A4  
                          l1456 0CEC                            l1448 0C88                            l1376 0C00  
                          l1384 1036                            l1392 0E46                            l1472 090E  
                          l1480 0940                            l1464 08F6                            l1560 1072  
                          l1536 10D2                            l1552 0B7C                            l1632 0D24  
                          l1720 0816                            l1712 07CA                            l1704 077E  
                          l1626 11BA                            l1618 11B2                            l1458 0CF4  
                          l1378 0C1C                            l1386 1042                            l1394 0E54  
                          l1490 0986                            l1482 0950                            l1474 091A  
                          l1466 0902                            l1562 108A                            l1554 0B8E  
                          l1546 0B40                            l1642 0D74                            l1634 0D34  
                          l1730 085E                            l1722 081C                            l1714 07D4  
                          l1706 0788                            l1628 11BC                            l1652 0F3E  
                          l1572 1114                            l1580 116E                            l1388 1050  
                          l1396 0E60                            l1492 09A2                            l1484 0964  
                          l1468 0906                            l1660 10E0                            l1556 0BB4  
                          l1548 0B4A                            l1636 0D48                            l1644 0D8E  
                          l1732 087A                            l1724 082E                            l1716 07F0  
                          l1708 07A4                            l1654 0F42                            l1574 1118  
                          l1582 1170                            l1590 0DB8                            l1398 0E6E  
                          l1494 09BA                            l1486 0972                            l1478 0922  
                          l1662 10E8                            l1566 1090                            l1646 0D9E  
                          l1638 0D6E                            l1742 0892                            l1734 0880  
                          l1726 083C                            l1718 07FA                            l1750 08C2  
                          l1656 0F66                            l1576 1126                            l1584 1178  
                          l1592 0DBA                            l1496 09C8                            l1488 097C  
                          l1664 10F0                            l1568 10A8                            l1648 0DB4  
                          l1744 08A0                            l1736 0890                            l1728 0858  
                          l1680 06A8                            l1672 068E                            l1658 0F6A  
                          l1586 117A                            l1578 116A                            l1594 0E42  
                          l1666 10F8                            l1746 08A2                            l1690 06F0  
                          l1682 06AE                            l1674 069A                            l1588 1182  
                          l1668 1108                            l1748 08B2                            l1692 070C  
                          l1684 06BE                            l1676 069E                            l1598 1186  
                          l1694 0716                            l1686 06C0                            l1678 06A2  
                          l1696 0732                            l1688 06DC                            l1698 073C  
                          ?_pad 0011                            STR_1 0683                            STR_2 0683  
                          STR_3 0614                            STR_4 0632                            STR_5 0632  
                          STR_6 063B                            STR_7 063B                            STR_8 0644  
                          STR_9 0644                            _BRGH 7D62                            u1000 0D34  
                          _CREN 7D5C                            u1001 0D30                            u1010 0D6E  
                          u1011 0D6A                            u1020 0D9E                            u1100 0732  
                          u1021 0D9A                            u1101 072E                            u1030 0DB4  
                          u1110 0758                            u1031 0DB0                            u1111 0754  
                          u1040 0F62                            u1120 077E                            u1121 077A  
                          u1050 0F8A                            u1130 07A4                            u1131 07A0  
                          u1060 0F9A                            u1140 07CA                            u1061 0F96  
                          u1141 07C6                            u1150 07F0                            u1070 06BE  
                          u1047 0F58                            u1151 07EC                            u1071 06BA  
                          u1160 0816                            u1080 06DC                            u1057 0F80  
                          u1161 0812                            u1081 06D8                            u1170 0858  
                          u1090 070C                            u1171 0854                            u1091 0708  
                          u1180 087A                            u1237 1172                            u1181 0876  
                          u1190 08B2                            u1247 117C                            u1191 08AE  
                          _LATD 0F8C                            u1257 111E                            _PEIE 7F96  
                          _RCIE 7CED                            _RCIF 7CF5                            _SPEN 7D5F  
                          _TXEN 7D65                            _TXIF 7CF4                            _SYNC 7D64  
                          _dbuf 0080                            _main 068E                            _prec 0045  
                          pad@i 0016                            pad@p 0013                            fsr1h 0FE2  
                          fsr2h 0FDA                            indf1 0FE7                            indf2 0FDF  
                          fsr1l 0FE1                            fsr2l 0FD9                            btemp 0068  
                          _xtoa 0A24                            prodh 0FF4                            prodl 0FF3  
                          start 000E                    ___param_bank 0000                           ??_ISR 0001  
                         ??_pad 0015              latch_data@seg_data 0004                           ?_main 0001  
                         STR_10 064D                           STR_11 064D                           STR_12 0656  
                         STR_20 061F                           STR_13 0656                           STR_21 0668  
                         STR_22 0668                           STR_14 0671                           STR_15 0671  
                         STR_23 065F                           STR_24 065F                           STR_16 0629  
                         _BRG16 7DC3                           STR_17 0629                           STR_25 0601  
                         STR_26 061C                           STR_18 067A                           STR_19 067A  
                         ?_xtoa 0018                           i2l164 0FEC                           _RCREG 0FAE  
                  vfpfcnvrt@fmt 0025                           _SPBRG 0FAF                           _TXREG 0FAD  
                  main@rc_input 0041                   SelectIO@index 0004                           _flags 0047  
           read_prec_or_width@c 0008             read_prec_or_width@n 0009                           _fputc 0BD6  
                         _fputs 1036                           pad@fp 0011                           _width 0043  
                         _putch 11E4                           main@i 0042                ?_UART_SendString 0005  
                         tablat 0FF5                           ttemp5 0069                           ttemp6 006C  
                         ttemp7 0070                           status 0FD8                           wtemp8 0069  
               __end_of_sprintf 1114                           xtoa@c 0021                           xtoa@d 0019  
                         xtoa@i 0022                           xtoa@p 001E                           xtoa@w 001F  
               __end_of_strncmp 0BD6                 __initialization 1142                    __end_of_main 08CC  
                  __end_of_xtoa 0B1A                          ??_main 0041                __end_of_SelectIO 0F3E  
                        ??_xtoa 001B                   __activetblptr 0002      __end_of_read_prec_or_width 0D24  
      ??_init_inputs_RC0_to_RC4 0004                          ?_fputc 0004                          ?_fputs 000C  
                        ?_putch 0001                          i2l1760 0FD4                          i2l1752 0FA6  
                        i2l1762 0FD6                          i2l1754 0FB4                          i2l1764 0FE6  
                        i2l1756 0FB8                          i2l1766 0FEA                          i2l1758 0FC8  
                 vfpfcnvrt@done 002B                          _TRISC6 7CA6                          _TRISC7 7CA7  
              __end_of_delay_ms 1142                    vfprintf@cfmt 0030               __end_of_UART_Init 11C2  
                        _buffer 004A            read_prec_or_width@ap 0005                          clear_0 1148  
                        clear_1 1154                          isa$std 0001                          pad@buf 0012  
                        _strchr 1072                          _strlen 10AC                          _strstr 0D24  
                        fputc@c 0004                          fputs@c 000E                          fputs@i 000F  
                        fputs@s 000C                    __mediumconst 0600                          tblptrh 0FF7  
                        tblptrl 0FF6                          tblptru 0FF8                          putch@c 0001  
              __end_of_vfprintf 1036                       ??_sprintf 0035           __end_of_UART_SendChar 11D8  
                        xtoa@fp 0018                       ??_strncmp 0008                      __accesstop 0080  
       __end_of__initialization 115A                   ___rparam_used 0001                  __pcstackCOMRAM 0001  
                 __end_of_fputc 0C80                   __end_of_fputs 1072                   __end_of_putch 11E6  
                   ISR@received 0003                         ??_fputc 0007                         ??_fputs 000E  
                       ??_putch 0004                      __pbssBANK0 0080                       ?_SelectIO 0001  
                       ?_strchr 0004                         ?_strlen 0004                         ?_strstr 0009  
                     ?_delay_ms 0004                      _latch_data 1168                      ??_SelectIO 0004  
                       __Hparam 0000                         __Lparam 0000              UART_SendString@str 0005  
        _init_inputs_RC0_to_RC4 11D8                       ?_vfprintf 002D                    __psmallconst 0600  
                       __pcinit 1142                      _init_ports 1186                         __ramtop 0600  
                       __ptext0 068E                         __ptext1 0D24                         __ptext2 0B1A  
                       __ptext3 10AC                         __ptext4 1072                         __ptext5 10E0  
                       __ptext6 0FF8                         __ptext7 08CC                         __ptext8 0A24  
                       __ptext9 0E46            read_RC_inputs@result 0005           read_prec_or_width@fmt 0004  
                    ??_delay_ms 0006                         _sprintf 10E0                         _strncmp 0B1A  
                __pintcode_body 0F9C                      delay_ms@ms 0004            end_of_initialization 115A  
                       fputc@fp 0006                   __Lmediumconst 0000                         int_func 0F9C  
                       fputs@fp 000D              _read_prec_or_width 0C80               __end_of_vfpfcnvrt 0A24  
                       postdec2 0FDD             ?_read_prec_or_width 0004                         postinc0 0FEE  
                       postinc1 0FE6                         postinc2 0FDE                vfpfcnvrt@convarg 0027  
                    ??_vfprintf 0030                         strchr@c 0005                         strchr@s 0004  
                       strlen@a 0006                         strlen@s 0004                       _UART_Init 11A4  
                       strstr@h 0009                         strstr@n 000A                       _PORTCbits 0F82  
                _read_RC_inputs 0DB8                       _TRISAbits 0F92                       _TRISBbits 0F93  
                     _TRISCbits 0F94                       _TRISEbits 0F96            ??_read_prec_or_width 0006  
                   ?_latch_data 0001                     vfpfcnvrt@ap 0026                     vfpfcnvrt@cp 002C  
                   vfpfcnvrt@fp 0024                      ?_UART_Init 0001                     ?_init_ports 0001  
        __end_of_read_RC_inputs 0E46                  __end_of_strchr 10AC                  __end_of_strlen 10E0  
                __end_of_strstr 0DB8             start_initialization 1142                     __end_of_ISR 0FF8  
                   __end_of_pad 0ED0                     vfprintf@fmt 002E               ??_UART_SendString 0007  
               ?_read_RC_inputs 0001                        ??_strchr 0007                        ??_strlen 0006  
                      ??_strstr 000B                _uart_frame_ready 0049                     __pbssCOMRAM 0043  
       ?_init_inputs_RC0_to_RC4 0001                       __pintcode 0008                     ??_UART_Init 0004  
                   __smallconst 0600                        ?_sprintf 0031                        ?_strncmp 0004  
                 _UART_SendChar 11C2                  _uart_rx_buffer 005E  __end_of_init_inputs_RC0_to_RC4 11E4  
                      _LATAbits 0F89                        _LATBbits 0F8A                        _LATCbits 0F8B  
                      _LATEbits 0F8D                        i2u120_40 0FB4                        i2u120_41 0FB0  
                      i2u121_40 0FC8                        i2u121_41 0FC4                        i2u122_40 0FE6  
                      i2u122_41 0FE2                       _vfpfcnvrt 08CC                 UART_SendChar@ch 0004  
                ?_UART_SendChar 0001                    ??_latch_data 0004                        _SelectIO 0ED0  
                      __Hrparam 0000                      vfprintf@ap 002F                        __Lrparam 0000  
                    vfprintf@fp 002D                      ?_vfpfcnvrt 0024                    ??_init_ports 0004  
                    sprintf@fmt 0032              __end_of_latch_data 1186                        _delay_ms 1114  
                      __ptext10 1036                        __ptext11 0BD6                        __ptext20 11C2  
                      __ptext12 11E4                        __ptext21 11A4                        __ptext13 0C80  
                      __ptext22 0ED0                        __ptext14 0DB8                        __ptext15 1168  
                      __ptext16 1186                        __ptext17 11D8                        __ptext18 1114  
                      __ptext19 0F3E              __end_of_init_ports 11A4                   _uart_rx_index 0048  
               _UART_SendString 0F3E                ??_read_RC_inputs 0004                        isa$xinst 0000  
                      int$flags 0068                        _vfprintf 0FF8                 ??_UART_SendChar 0004  
                      intlevel2 0000                       sprintf@ap 0035                     ??_vfpfcnvrt 0027  
                      sprintf@f 0036                        sprintf@s 0031                        strncmp@l 0004  
                      strncmp@n 0006                        strncmp@r 0005                        strstr@nl 000B  
       __end_of_UART_SendString 0F9C  
